{"version":3,"sources":["assets/racecar.svg","assets/parking-sign.svg","assets/robot.svg","components/RobotPath.js","components/Map.js","components/Canvas.js","components/cameras/Overhead.js","components/cameras/Onboard.js","components/GridSettings.js","assets/planner-logic/domain.js","assets/planner-logic/problem.js","actions/plan.js","actions/generatePath.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","DebugPath","robotPath","parkingLotOffset","debugGridCellSize","pathStop","forEach","element","xCoord","x","i","width","yCoord","y","j","height","push","points","shadowBlur","stroke","strokeWidth","carURL","require","parkingURL","Map","spacesAvailable","offset","debugMode","useImage","carImage","parkingImage","parkingLotLayout","map","parkingLot","index","lotRender","debugName","hasStatus","type","key","fillRadialGradientStartPoint","fillRadialGradientEndPoint","fillRadialGradientStartRadius","fillRadialGradientColorStops","includes","image","fill","text","fontSize","robotURL","Canvas","robotLocation","gridSize","size","window","innerWidth","robotImage","sceneFunc","context","shape","beginPath","moveTo","HEIGHT","lineTo","closePath","fillStrokeShape","RobotPath","Cctv","className","Onboard","GridSettings","toggleSettings","show","changeGridSize","Modal","aria-labelledby","centered","Header","Title","id","Body","Footer","Button","variant","onClick","domain","problem","plan","a","options","url","method","contentType","headers","data","JSON","stringify","axios","then","response","result","generatePath","steps","newPathPoint","path","action","name","App","state","settingsOn","showAlert","bind","spaceIndex","toModifySpacesAvailable","this","setState","Navbar","bg","sticky","Brand","Nav","NavDropdown","title","Item","href","Divider","toggleDebugMode","Overhead","aria-live","aria-atomic","style","position","bottom","right","Toast","onClose","delay","autohide","color","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.893e83e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/racecar.e66ab204.svg\";","module.exports = __webpack_public_path__ + \"static/media/parking-sign.013e9a4f.svg\";","module.exports = __webpack_public_path__ + \"static/media/robot.3f20bb4e.svg\";","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Arrow } from \"react-konva\";\n\nfunction DebugPath({ robotPath, parkingLotOffset, debugGridCellSize }) {\n    let pathStop = [];\n    robotPath.forEach(element => {\n        let xCoord =\n            parkingLotOffset.x +\n            element.i * debugGridCellSize.width +\n            debugGridCellSize.width / 2\n            ;\n        let yCoord =\n            parkingLotOffset.y +\n            element.j * debugGridCellSize.height +\n            debugGridCellSize.height / 2\n            ;\n        pathStop.push(xCoord);\n        pathStop.push(yCoord);\n    });\n\n    return (<>{\n        < Arrow\n            points={pathStop}\n            shadowBlur={3}\n            stroke={\"black\"}\n            strokeWidth={1.7}\n        />}</>\n    );\n}\n\nDebugPath.propTypes = {\n    robotPath: PropTypes.array.isRequired,\n    parkingLotOffset: PropTypes.object.isRequired,\n    debugGridCellSize: PropTypes.object.isRequired\n};\n\nexport default DebugPath;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Rect, Text, Group, Image } from \"react-konva\";\nimport parkingLotLayout from \"../assets/planner-logic/map.json\";\nimport useImage from 'use-image';\nconst carURL = require('../assets/racecar.svg');\nconst parkingURL = require('../assets/parking-sign.svg');\n\nfunction Map({ spacesAvailable, debugGridCellSize, offset, debugMode }) {\n    const [carImage] = useImage(carURL);\n    const [parkingImage] = useImage(parkingURL);\n\n    return (parkingLotLayout.map((parkingLot, index) => {\n        let lotRender = null;\n        let debugName = null;\n        let hasStatus = false;\n\n        switch (parkingLot.type) {\n            case \"parking\":\n                lotRender = <Group\n                    key={index}>\n                    <Rect\n                        x={offset.x + parkingLot.x * debugGridCellSize.width}\n                        y={offset.y + parkingLot.y * debugGridCellSize.height}\n                        width={debugGridCellSize.width}\n                        height={debugGridCellSize.height}\n                        fillRadialGradientStartPoint={{ x: debugGridCellSize.width / 2, y: debugGridCellSize.height / 2 }}\n                        fillRadialGradientEndPoint={{ x: debugGridCellSize.width / 2, y: debugGridCellSize.height / 2 }}\n                        fillRadialGradientStartRadius={debugGridCellSize.width > debugGridCellSize.height ? debugGridCellSize.height : debugGridCellSize.width}\n                        fillRadialGradientColorStops={\n                            spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x) ?\n                                [0, \"rgba(63,145,60)\", 1, \"rgba(103,233,98)\"] :\n                                [0, \"rgba(141,38,38)\", 1, \"rgba(230,67,67)\"]\n                        }\n                        shadowBlur={5}\n                        stroke={\"black\"}\n                        strokeWidth={3}\n                    />\n                    <Image\n                        x={offset.x + parkingLot.x * debugGridCellSize.width + debugGridCellSize.width / 2.6}\n                        y={offset.y + parkingLot.y * debugGridCellSize.height + debugGridCellSize.height / 3.5}\n                        image={parkingImage}\n                        shadowBlur={5}\n                    />\n                    {!spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x) ?\n                        <Image\n                            x={offset.x + parkingLot.x * debugGridCellSize.width + 30}\n                            y={offset.y + parkingLot.y * debugGridCellSize.height - 40}\n                            image={carImage}\n                            shadowBlur={5}\n                        /> :\n                        null\n                    }\n                </Group>\n                debugName = \"Parking space\";\n                hasStatus = true;\n                break;\n            case \"hub\":\n                lotRender = <>\n                    <Rect\n                        x={offset.x + parkingLot.x * debugGridCellSize.width}\n                        y={offset.y + parkingLot.y * debugGridCellSize.height}\n                        width={debugGridCellSize.width}\n                        height={debugGridCellSize.height}\n                        fillRadialGradientStartPoint={{ x: debugGridCellSize.width / 2, y: debugGridCellSize.height / 2 }}\n                        fillRadialGradientEndPoint={{ x: debugGridCellSize.width / 2, y: debugGridCellSize.height / 2 }}\n                        fillRadialGradientStartRadius={debugGridCellSize.width > debugGridCellSize.height ? debugGridCellSize.height : debugGridCellSize.width}\n                        fillRadialGradientColorStops={[0, \"rgb(14, 82, 165)\", 1, \"rgb(19, 115, 236)\"]}\n                        shadowBlur={5}\n                        stroke={\"black\"}\n                        strokeWidth={3}\n                    />\n                    {!spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x) ?\n                        <Image\n                            x={offset.x + parkingLot.x * debugGridCellSize.width + 30}\n                            y={offset.y + parkingLot.y * debugGridCellSize.height - 40}\n                            image={carImage}\n                            shadowBlur={5}\n                        /> :\n                        null\n                    }\n                </>\n                debugName = \"Hub\";\n                hasStatus = true;\n                break;\n            case \"road\":\n                debugName = \"Road\";\n                break;\n            case \"blocked\":\n                debugName = \"Blocked space\";\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <Group key={index}>\n                {lotRender}\n                {debugMode ?\n                    <Group>\n                        <Rect\n                            x={offset.x + parkingLot.x * debugGridCellSize.width}\n                            y={offset.y + parkingLot.y * debugGridCellSize.height}\n                            width={debugGridCellSize.width}\n                            height={debugGridCellSize.height}\n                            fill={\"rgba(255, 255, 255, 0.3)\"}\n                            shadowBlur={5}\n                            stroke={\"black\"}\n                            strokeWidth={3}\n                        />\n                        <Text\n                            x={offset.x + parkingLot.x * debugGridCellSize.width + debugGridCellSize.width / 10}\n                            y={offset.y + parkingLot.y * debugGridCellSize.height + debugGridCellSize.height / 12}\n                            text={\"R\" + parkingLot.y + \"C\" + parkingLot.x + \" (\" + debugName + \")\"}\n                            fontSize={20}\n                        />\n                        <Text\n                            x={offset.x + parkingLot.x * debugGridCellSize.width + debugGridCellSize.width / 10}\n                            y={offset.y + parkingLot.y * debugGridCellSize.height + debugGridCellSize.height / 1.25}\n                            text={hasStatus ?\n                                \"Status: \" +\n                                (parkingLot.type === \"hub\" ?\n                                    (spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x) ?\n                                        \"Available\" : \"Awaiting Parking\") :\n                                    (parkingLot.type === \"parking\" ?\n                                        (spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x) ?\n                                            \"Available\" : \"Occupied\") :\n                                        null)) :\n                                null\n                            }\n                            fontSize={20}\n                        />\n                    </Group> :\n                    null\n                }\n            </Group>\n        );\n    }));\n}\n\nMap.propTypes = {\n    spacesAvailable: PropTypes.array.isRequired,\n    debugGridCellSize: PropTypes.object.isRequired,\n    debugMode: PropTypes.bool.isRequired,\n    offset: PropTypes.object.isRequired\n};\n\nexport default Map;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport RobotPath from './RobotPath';\n// import DateTime from './DateTime';\nimport { Stage, Layer, Shape, Image } from \"react-konva\";\nimport Map from './Map';\nimport useImage from 'use-image';\nconst robotURL = require('../assets/robot.svg');\n\nfunction Canvas({ spacesAvailable, debugMode, robotPath, robotLocation, gridSize }) {\n    const HEIGHT = 750;\n    // this is 96cm\n    const squareSideHeightRatio = 96 / 288;\n    const upperLeftSquareSide = HEIGHT * squareSideHeightRatio;\n    // height is 288cm, width is 401.4cm\n    const widthHeightRatio = 401.4 / 288;\n    const size = { height: HEIGHT, width: HEIGHT * widthHeightRatio };\n    const offset = { x: (window.innerWidth - 30) / 2 - size.width / 2, y: 50 };\n    const debugGridCellSize = {\n        height: size.height / gridSize.x,\n        width: size.width / gridSize.y\n    }\n    const [robotImage] = useImage(robotURL);\n\n    return (\n        <div >\n            {/* <DateTime /> */}\n            <Stage width={1500} height={835}>\n                <Layer>\n                    {/* Parking Lot Shape  */}\n                    <Shape\n                        x={offset.x}\n                        y={offset.y}\n                        sceneFunc={(context, shape) => {\n                            context.beginPath();\n                            context.moveTo(upperLeftSquareSide, 0);\n                            context.lineTo(upperLeftSquareSide, upperLeftSquareSide);\n                            context.lineTo(0, upperLeftSquareSide);\n                            context.lineTo(0, size.height);\n                            context.lineTo(size.width, size.height);\n                            context.lineTo(size.width, 0);\n                            context.closePath();\n                            // (!) Konva specific method, it is very important\n                            context.fillStrokeShape(shape);\n                        }}\n                        fillRadialGradientStartPoint={{ x: size.width / 2, y: size.height / 2 }}\n                        fillRadialGradientEndPoint={{ x: size.width / 2, y: size.height / 2 }}\n                        fillRadialGradientStartRadius={size.width > size.height ? size.height : size.width}\n                        fillRadialGradientColorStops={[\n                            0, \"rgb(190, 190, 190)\",\n                            1, \"rgb(255, 255, 255)\"\n                        ]}\n                        stroke={\"black\"}\n                        strokeWidth={5}\n                    />\n                    <Map\n                        spacesAvailable={spacesAvailable}\n                        debugMode={debugMode}\n                        debugGridCellSize={debugGridCellSize}\n                        offset={offset}\n                    />\n                    <RobotPath\n                        debugGridCellSize={debugGridCellSize}\n                        robotPath={robotPath}\n                        parkingLotOffset={offset}\n                    />\n                    <Image\n                        x={offset.x + robotLocation.x * debugGridCellSize.width + debugGridCellSize.width / 4}\n                        y={offset.y + robotLocation.y * debugGridCellSize.height}\n                        image={robotImage}\n                        shadowBlur={5}\n                    />\n                </Layer>\n            </Stage>\n        </div>\n    );\n}\n\nCanvas.propTypes = {\n    gridSize: PropTypes.object.isRequired,\n    robotLocation: PropTypes.object.isRequired,\n    robotPath: PropTypes.array.isRequired,\n    spacesAvailable: PropTypes.array.isRequired,\n    debugMode: PropTypes.bool.isRequired\n};\n\nexport default Canvas;\n","import React from \"react\";\n\nfunction Cctv() {\n    return (\n        <div className=\"App\" >\n            <header className=\"App-header\">\n                <h3 className=\"mb-3\"> CCTV camera </h3>\n            </header>\n        </div>\n    );\n}\n\nexport default Cctv;\n","import React from \"react\";\n\nfunction Onboard() {\n    return (\n        <div className=\"App\" >\n            <header className=\"App-header\">\n                <h3> Live stream from onboard Raspberry Pi cameras to be placed here</h3>\n            </header>\n        </div>\n    );\n}\n\nexport default Onboard;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Button, Modal } from 'react-bootstrap';\n\nfunction GridSettings({ toggleSettings, show, changeGridSize }) {\n    return (\n        <Modal\n            show={show}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Grid Settings\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <h4>Centered Modal</h4>\n                <p>\n                    Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\n                    dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac\n                    consectetur ac, vestibulum at eros.\n                </p>\n            </Modal.Body>\n            <Modal.Footer>\n          <Button variant=\"secondary\" onClick={toggleSettings}>\n            Close\n          </Button>\n                <Button onClick={() => {changeGridSize(4, 6)}}>Change Grid Dimensions</Button>\n                {/* <Button onClick={onHide}>Enable Edit Mode</Button> */}\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nGridSettings.propTypes = {\n    toggleSettings: PropTypes.func.isRequired,\n    changeGridSize: PropTypes.func.isRequired,\n    show: PropTypes.bool.isRequired\n};\n\nexport default GridSettings;\n\n","var domain = ';; Authors: Theodor Amariucai & Bora M. Alper (in no particular order)\\n\\n(define (domain finitech)\\n    (:requirements :adl :typing :negative-preconditions :strips)\\n\\n    (:types\\n        blockedTile - tile  ;; physically inaccessible \\n        roadTile - tile\\n        parkingTile - tile\\n        hubTile - tile\\n        \\n        car - dynamic  ;; cars can only be moved around with the help of the robot\\n        robot - dynamic\\n    )\\n\\n    (:predicates\\n        ;; TODO: enforce that one and only one is true at a given time\\n        (TemporarilyBlocked ?t - tile)\\n\\n        ;; The car is waiting to be parked\\n        (AwaitingParking ?c - car)\\n        ;; The car is waiting for delivery\\n        (AwaitingDelivery ?c - car)\\n        ;; Otherwise the car is waiting for its owner\\n\\n        ;; ?a IsToTheLeftOf/IsAbove ?b\\n        (IsToTheLeftOf ?a - tile ?b - tile)\\n        (IsAbove ?a - tile ?b - tile)\\n\\n        (IsAt ?m - dynamic ?t - tile)\\n\\n        (IsCarrying ?r - robot ?c - car)\\n    )\\n\\n    ;;;;;; WE ASSUME HORIZONTAL TILES!\\n\\n    ;;;; Action Template - Delete and fill in own actions ;;;;\\n    (:action go-left\\n        :parameters (?r - robot ?f - tile ?t - roadTile)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?t ?f)\\n            (not (TemporarilyBlocked ?t))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n        )\\n    )\\n\\n    (:action go-right\\n        :parameters (?r - robot ?f - tile ?t - roadTile)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?f ?t)\\n            (not (TemporarilyBlocked ?t))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n        )\\n    )\\n\\n    (:action go-up\\n        :parameters (?r - robot ?f - roadTile ?t - roadTile)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsAbove ?t ?f)\\n            (not (TemporarilyBlocked ?t))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n        )\\n    )\\n\\n    (:action go-down\\n        :parameters (?r - robot ?f - roadTile ?t - roadTile)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsAbove ?f ?t)\\n            (not (TemporarilyBlocked ?t))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n        )\\n    )\\n\\n    ;; 1) scan\\n    ;; 2) slide under\\n    ;; 3) lift\\n    ;; END\\n    (:action pickup-car-leftwards\\n        :parameters (?r - robot ?f - roadTile ?t - hubTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsAt ?c ?t)\\n            (IsToTheLeftOf ?t ?f)\\n            \\n            (not (exists (?c2 - car) (and (IsCarrying ?r ?c2))))\\n            (AwaitingParking ?c)\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (not (IsAt ?c ?t))\\n            (IsAt ?r ?t)\\n            \\n            (IsCarrying ?r ?c)\\n        )\\n    )\\n\\n    (:action dropoff-car-leftwards\\n        :parameters (?r - robot ?f - roadTile ?t - hubTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?t ?f)\\n            \\n            (IsCarrying ?r ?c)\\n            (not (exists (?c2 - car) (IsAt ?c2 ?t)))\\n            ;; Necessary? (AwaitingDelivery ?c)\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            (IsAt ?c ?t)\\n            \\n            (not (IsCarrying ?r ?c))\\n            (not (AwaitingDelivery ?c))\\n        )\\n    )\\n\\n    (:action park-car-rightwards\\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?f ?t)\\n            \\n            (not (exists (?c2 - car) (IsAt ?c2 ?t)))\\n            (IsCarrying ?r ?c)\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            \\n            (not (IsCarrying ?r ?c))\\n            (IsAt ?c ?t)\\n            (not (AwaitingParking ?c))\\n        )\\n    )\\n\\n    (:action park-car-leftwards\\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?t ?f)\\n            \\n            (not (exists (?c2 - car) (IsAt ?c2 ?t)))\\n            (IsCarrying ?r ?c)\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            \\n            (not (IsCarrying ?r ?c))\\n            (IsAt ?c ?t)\\n            (not (AwaitingParking ?c))\\n        )\\n    )\\n\\n    ;;;;\\n\\n    (:action retrieve-car-rightwards\\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?f ?t)\\n            \\n            (AwaitingDelivery ?c)\\n            (IsAt ?c ?t)\\n            \\n            (not (exists (?c2 - car) (and\\n                (IsCarrying ?r ?c2)\\n            )))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            \\n            (not (IsAt ?c ?t))\\n            (IsCarrying ?r ?c)\\n        )\\n    )\\n\\n    (:action retrieve-car-leftwards\\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?t ?f)\\n            \\n            (AwaitingDelivery ?c)\\n            (IsAt ?c ?t)\\n            \\n            (not (exists (?c2 - car) (and\\n                (IsCarrying ?r ?c2)\\n            )))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            \\n            (not (IsAt ?c ?t))\\n            (IsCarrying ?r ?c)\\n        )\\n    )\\n\\n)\\n\\n';\nexport default domain;","var problem = ';; Authors: Theodor Amariucai & Bora M. Alper (in no particular order)\\n\\n(define (problem parking)\\n    (:domain finitech)\\n    \\n    (:objects\\n        Robot - robot\\n        Car1 - car\\n        Car2 - car\\n        Car3 - car\\n        Car4 - car\\n        Car5 - car\\n        \\n        R0C0 - blockedTile\\n        R0C1 - parkingTile\\n        R0C2 - roadTile\\n        R0C3 - parkingTile\\n        R1C0 - blockedTile\\n        R1C1 - parkingTile\\n        R1C2 - roadTile\\n        R1C3 - parkingTile\\n        R2C0 - hubTile\\n        R2C1 - roadTile\\n        R2C2 - roadTile\\n        R2C3 - parkingTile\\n        R3C0 - hubTile\\n        R3C1 - roadTile\\n        R3C2 - roadTile\\n        R3C3 - parkingTile\\n        R4C0 - hubTile\\n        R4C1 - roadTile\\n        R4C2 - roadTile\\n        R4C3 - parkingTile\\n        R5C0 - hubTile\\n        R5C1 - roadTile\\n        R5C2 - roadTile\\n        R5C3 - parkingTile\\n    )\\n\\n    (:init\\n        (IsAt Robot R5C1)\\n        (IsCarrying Robot Car4)\\n        (IsAt Car1 R5C0)\\n        (IsAt Car2 R4C0)\\n        (IsAt Car3 R0C1)\\n        (IsAt Car5 R0C3)\\n        (AwaitingParking Car1)\\n        (AwaitingParking Car2)\\n        (AwaitingDelivery Car3)\\n        (AwaitingDelivery Car4)\\n        \\n        (IsToTheLeftOf R0C0 R0C1)\\n        (IsToTheLeftOf R0C1 R0C2)\\n        (IsToTheLeftOf R0C2 R0C3)\\n        (IsToTheLeftOf R1C0 R1C1)\\n        (IsToTheLeftOf R1C1 R1C2)\\n        (IsToTheLeftOf R1C2 R1C3)\\n        (IsToTheLeftOf R2C0 R2C1)\\n        (IsToTheLeftOf R2C1 R2C2)\\n        (IsToTheLeftOf R2C2 R2C3)\\n        (IsToTheLeftOf R3C0 R3C1)\\n        (IsToTheLeftOf R3C1 R3C2)\\n        (IsToTheLeftOf R3C2 R3C3)\\n        (IsToTheLeftOf R4C0 R4C1)\\n        (IsToTheLeftOf R4C1 R4C2)\\n        (IsToTheLeftOf R4C2 R4C3)\\n        (IsToTheLeftOf R5C0 R5C1)\\n        (IsToTheLeftOf R5C1 R5C2)\\n        (IsToTheLeftOf R5C2 R5C3)\\n\\n        (IsAbove R0C0 R1C0)\\n        (IsAbove R0C1 R1C1)\\n        (IsAbove R0C2 R1C2)\\n        (IsAbove R0C3 R1C3)\\n        (IsAbove R1C0 R2C0)\\n        (IsAbove R1C1 R2C1)\\n        (IsAbove R1C2 R2C2)\\n        (IsAbove R1C3 R2C3)\\n        (IsAbove R2C0 R3C0)\\n        (IsAbove R2C1 R3C1)\\n        (IsAbove R2C2 R3C2)\\n        (IsAbove R2C3 R3C3)\\n        (IsAbove R3C0 R4C0)\\n        (IsAbove R3C1 R4C1)\\n        (IsAbove R3C2 R4C2)\\n        (IsAbove R3C3 R4C3)\\n        (IsAbove R4C0 R5C0)\\n        (IsAbove R4C1 R5C1)\\n        (IsAbove R4C2 R5C2)\\n        (IsAbove R4C3 R5C3)\\n    )\\n\\n    (:goal (and\\n        (not (exists (?c - car) (or\\n            (AwaitingParking ?c)\\n            (AwaitingDelivery ?c)\\n        )))\\n    ))\\n)\\n\\n';\nexport default problem;","import domain from '../assets/planner-logic/domain.js';\nimport problem from '../assets/planner-logic/problem.js';\nimport axios from 'axios';\n\n//mostachito\n\nexport default async function plan() {\n    const options = {\n        url: 'http://solver.planning.domains/solve-and-validate',\n        method: 'POST',\n        contentType: 'application/json',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json;charset=UTF-8'\n        },\n        data: JSON.stringify({\n            \"domain\": domain,\n            \"problem\": problem\n        })\n    };\n\n    return await axios(options)\n        .then(response => {\n            if (response['data']['status'] === 'ok') {\n                return response.data.result.plan;\n            } else {\n                return -1;\n            }\n        });\n}","export default function generatePath(steps, robotLocation) {\n    let newPathPoint = { i: robotLocation.x, j: robotLocation.y };\n    let path = [newPathPoint];\n    steps.forEach(action => {\n        if (action.name.includes(\"go-up\")) {\n            newPathPoint = { i: newPathPoint.i - 1, j: newPathPoint.j };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"go-down\")) {\n            newPathPoint = { i: newPathPoint.i + 1, j: newPathPoint.j };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"go-right\") ||\n            action.name.includes(\"park-car-rightwards\") ||\n            action.name.includes(\"retrieve-car-rightwards\")) {\n            newPathPoint = { i: newPathPoint.i, j: newPathPoint.j + 1 };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"go-left\") ||\n            action.name.includes(\"dropoff-car-leftwards\") ||\n            action.name.includes(\"pickup-car-leftwards\") ||\n            action.name.includes(\"park-car-leftwards\") ||\n            action.name.includes(\"retrieve-car-leftwards\")) {\n            newPathPoint = { i: newPathPoint.i, j: newPathPoint.j - 1 };\n            path.push(newPathPoint)\n        }\n    })\n    return path;\n};","import React from 'react';\nimport Canvas from './Canvas';\nimport Overhead from './cameras/Overhead';\nimport Onboard from './cameras/Onboard';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Navbar, Nav, NavDropdown, Toast } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport GridSettings from './GridSettings';\nimport { GoGear } from 'react-icons/go';\nimport plan from '../actions/plan';\nimport generatePath from '../actions/generatePath';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      spacesAvailable: [\"R0C1\", \"R1C1\", \"R0C3\", \"R1C3\", \"R2C0\", \"R3C0\"],\n      robotLocation: { x: 0, y: 4 }, // x is column and y row  for now\n      robotPath: [{ i: 0, j: 4 }, { i: 2, j: 4 }, { i: 2, j: 3 }, { i: 2, j: 3 }, { i: 2, j: 2 }, { i: 2, j: 1 }, { i: 3, j: 1 }],\n      debugMode: false,\n      gridSize: { x: 5, y: 4 },\n      settingsOn: false,\n      showAlert: false\n    };\n    this.toggleSettings = this.toggleSettings.bind(this);\n    this.changeGridSize = this.changeGridSize.bind(this);\n  }\n\n  toggleSpaceAvailable(spaceIndex) {\n    let toModifySpacesAvailable = [...this.state.spacesAvailable];\n    toModifySpacesAvailable[spaceIndex] = !toModifySpacesAvailable[spaceIndex];\n    this.setState({\n      spacesAvailable: toModifySpacesAvailable\n    });\n  }\n\n  toggleDebugMode() {\n    this.setState({\n      debugMode: !this.state.debugMode\n    });\n  }\n\n  toggleSettings() {\n    this.setState({\n      settingsOn: !this.state.settingsOn\n    });\n  }\n\n  changeGridSize(x, y) {\n    this.setState({\n      gridSize: { x: x, y: y }\n    });\n  }\n\n  async replan() {\n    let steps = await plan();\n    if (steps !== -1) {\n      this.setState({ robotPath: generatePath(steps, this.state.robotLocation) })\n    }\n  }\n\n  componentDidMount() {\n    // testing only\n    // this.replan();\n    this.setState({ showAlert: true })\n  }\n\n  render() {\n    return (\n      <Router>\n        <Navbar bg=\"primary\" variant=\"dark\" sticky=\"top\" >\n          <Navbar.Brand>Finitech Operations Monitor</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <NavDropdown title=\"Parking Lot\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#/\">View</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item\n                onClick={() => { this.toggleDebugMode() }}\n              >Debug Mode</NavDropdown.Item>\n              {/* <NavDropdown.Item\n                onClick={() => { this.toggleSettings() }}\n              >Debug Settings</NavDropdown.Item> */}\n            </NavDropdown>\n            <NavDropdown title=\"Cameras\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#/overhead\">CCTV</NavDropdown.Item>\n              <NavDropdown.Item href=\"#/onboard\">Onboard</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar>\n\n\n        <Switch>\n          <Route path=\"/overhead\">\n            <Overhead />\n          </Route>\n          <Route path=\"/onboard\">\n            <Onboard />\n          </Route>\n          <Route path=\"/\">\n            <div className=\"App\">\n              <GridSettings\n                changeGridSize={this.changeGridSize}\n                toggleSettings={this.toggleSettings}\n                show={this.state.settingsOn}\n              />\n              <Canvas\n                gridSize={this.state.gridSize}\n                robotLocation={this.state.robotLocation}\n                robotPath={this.state.robotPath}\n                debugMode={this.state.debugMode}\n                spacesAvailable={this.state.spacesAvailable}\n              />\n              <div\n                aria-live=\"polite\"\n                aria-atomic=\"true\"\n                style={{\n                  position: 'absolute',\n                  width: 300,\n                  bottom: 30,\n                  right: 30,\n                }}\n              >\n                <Toast onClose={() => this.setState({ showAlert: false })} show={this.state.showAlert} delay={5000} autohide>\n                  <Toast.Header>\n                    <GoGear />\n                    <strong className=\"mr-auto ml-2\">Replanning...</strong>\n                    just now\n                  </Toast.Header>\n                  <Toast.Body>\n                    <h6 style={{ color: \"rgb(70, 70, 70)\" }}>A new car has arrived! </h6>\n                  </Toast.Body>\n                </Toast>\n              </div>\n            </div>\n          </Route>\n        </Switch>\n      </Router >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}