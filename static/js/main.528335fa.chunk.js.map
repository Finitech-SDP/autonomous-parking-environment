{"version":3,"sources":["components/ParkingSpace.js","components/ParkingGroup.js","components/App.js","serviceWorker.js","index.js"],"names":["ParkingSpace","props","x","y","width","height","fillRadialGradientStartPoint","fillRadialGradientEndPoint","fillRadialGradientStartRadius","horizontal","fillRadialGradientColorStops","available","shadowBlur","stroke","strokeWidth","text","id","fontSize","ParkingGroup","groupSpaceIndex","slice","spaces","map","spaceIsAvailable","index","key","offset","columns","Math","floor","App","state","spacesAvailable","Array","fill","spaceIndex","toModifySpacesAvailable","this","setState","toggleSpaceAvailable","setInterval","curTime","Date","toLocaleString","className","sceneFunc","context","shape","beginPath","moveTo","lineTo","closePath","fillStrokeShape","Navbar","bg","variant","Brand","Nav","Link","href","path","Cameras","Home","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.528335fa.chunk.js","sourcesContent":["import React from \"react\";\nimport { Rect, Text, Group } from \"react-konva\";\n\nfunction ParkingSpace(props) {\n    return (\n        <Group>\n            <Rect\n                x={props.x}\n                y={props.y}\n                width={props.width}\n                height={props.height}\n                fillRadialGradientStartPoint={{ x: props.width / 2, y: props.height / 2 }}\n                fillRadialGradientEndPoint={{ x: props.width / 2, y: props.height / 2 }}\n                fillRadialGradientStartRadius={props.horizontal? props.height : props.width}\n                fillRadialGradientColorStops={\n                    props.available?\n                    [0, \"rgba(63,145,60)\", 1, \"rgba(103,233,98)\"] : \n                    [0, \"rgba(141,38,38)\", 1, \"rgba(230,67,67)\"]\n                }\n                shadowBlur={5}\n                stroke={\"black\"}\n                strokeWidth={3}\n            />\n            <Text\n                x={props.x + props.width / 2 - 5}\n                y={props.y + props.height / 2 - 10}\n                text={props.id}\n                fontSize={20}\n            />\n        </Group>\n    );\n}\n\nexport default ParkingSpace;\n","import React from \"react\";\nimport ParkingSpace from './ParkingSpace';\n\nfunction ParkingGroup(props) {\n    var width = props.horizontal ? 150 : 80, height = props.horizontal ? 80 : 150;\n    var groupSpaceIndex = props.slice[0];\n\n    return (\n        <>\n            {props.spaces.slice(props.slice[0], props.slice[1]).map((spaceIsAvailable, index) => {\n                groupSpaceIndex++;\n                return <ParkingSpace\n                    key={groupSpaceIndex}\n                    id={groupSpaceIndex}\n                    horizontal={props.horizontal}\n                    available={spaceIsAvailable}\n                    x={props.offset.x + (width + 3) * (index % props.columns)}\n                    y={props.offset.y + (height + 3) * Math.floor(index / props.columns)}\n                    width={width}\n                    height={height}\n                />\n            }\n            )}\n        </>\n    );\n}\n\nexport default ParkingGroup;\n","import React from 'react';\nimport ParkingGroup from './ParkingGroup';\nimport './App.css';\nimport { Stage, Layer, Shape } from \"react-konva\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { spacesAvailable: new Array(16).fill(true) };\n    // this.handleClick = this.handleClick.bind(this);\n  }\n\n  toggleSpaceAvailable(spaceIndex) {\n    let toModifySpacesAvailable = [...this.state.spacesAvailable];\n    toModifySpacesAvailable[spaceIndex] = !toModifySpacesAvailable[spaceIndex];\n    this.setState({\n      spacesAvailable: toModifySpacesAvailable\n    });\n  }\n\n  componentDidMount() {\n    this.toggleSpaceAvailable(4);\n    setInterval(() => {\n      this.setState({\n        curTime: new Date().toLocaleString()\n      })\n    }, 1000)\n  }\n\n  Home() {\n    return <div className=\"App\" >\n      <header className=\"App-header\">\n        <h3> {new Date().toLocaleString()} </h3>\n        <Stage width={1900} height={800}>\n          <Layer>\n            <Shape\n              x={200}\n              y={10}\n              sceneFunc={(context, shape) => {\n                context.beginPath();\n                context.moveTo(275, 0);\n                context.lineTo(275, 275);\n                context.lineTo(0, 275);\n                context.lineTo(0, 730);\n                context.lineTo(1500, 730);\n                context.lineTo(1500, 0);\n                context.closePath();\n                // (!) Konva specific method, it is very important\n                context.fillStrokeShape(shape);\n              }}\n              fill={\"white\"}\n              stroke={\"black\"}\n              strokeWidth={5}\n            />\n            <ParkingGroup\n              columns={5}\n              horizontal={true}\n              offset={{ x: 475, y: 10 }}\n              spaces={this.state.spacesAvailable}\n              slice={[0, 10]}\n            />\n            <ParkingGroup\n              columns={2}\n              horizontal={false}\n              offset={{ x: 200, y: 285 }}\n              spaces={this.state.spacesAvailable}\n              slice={[10, 17]}\n            />\n          </Layer>\n        </Stage>\n      </header>\n    </div>\n  }\n\n  Cameras() {\n    return <div className=\"App\" >\n    <header className=\"App-header\">\n      <h3> Live stream from all cameras to be placed here </h3>\n    </header>\n  </div>\n  }\n\n  render() {\n    return (\n      <Router>\n        <Navbar bg=\"primary\" variant=\"dark\">\n          <Navbar.Brand>Finitech Operations Monitor</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/\">Parking Lot</Nav.Link>\n            <Nav.Link href=\"/cameras\">Cameras</Nav.Link>\n          </Nav>\n        </Navbar>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/cameras\">\n            {this.Cameras()}\n          </Route>\n          <Route path=\"/\">\n            {this.Home()}\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}