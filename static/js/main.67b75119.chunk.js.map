{"version":3,"sources":["assets/images/parking-sign.svg","assets/images/hub.svg","assets/images/robot.svg","assets/images/racecar.svg","components/canvas/Map/ParkingLotTile.js","components/canvas/Map/HubTile.js","components/canvas/Map/DebugTile.js","components/canvas/Map/Map.js","components/canvas/Robot.js","components/canvas/Canvas.js","components/cameras/Overhead.js","components/Notifications.js","assets/initialMap.js","assets/planner/domain/domain.js","actions/plan.js","actions/processCommands.js","actions/generateProblem.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","ParkingLotTile","mapTile","cars","gridCellSize","parkingImage","carImage","occupied","hubColor","i","length","location","row","column","status","x","width","y","height","fillRadialGradientStartPoint","fillRadialGradientEndPoint","fillRadialGradientStartRadius","fillRadialGradientColorStops","shadowBlur","stroke","strokeWidth","image","visible","HubTile","hubImage","DebugTile","debugName","prettyCarStatus","type","fill","text","fontSize","parkingURL","require","hubURL","Map","map","offset","debugMode","useImage","index","tile","key","robotURL","Robot","robotGridStaticLocation","carriedCar","shiftPath","simulationOn","alreadyActivated","robotPath","removeCar","addCar","gridSize","parkingLotOffset","size","toggleSimulation","changeRobotGridStaticLocation","robotImage","robotImageRef","React","useRef","pathStop","xCoord","yCoord","push","setScale","current","to","scaleX","scaleY","duration","count","async","whilst","callback","pickupCar","dropCar","fromGridToCanvas","setTimeout","_err","position","points","ref","draggable","onDragStart","onDragEnd","robotCanvasLocation","cellColumn","Math","floor","columns","cellRow","rows","canvasLocation","propToGrid","_lastPos","carURL","Canvas","resizable","useState","stageHeight","setStageHeight","upperLeftSquareSide","checkSize","window","innerHeight","useEffect","addEventListener","sceneFunc","context","shape","beginPath","moveTo","lineTo","closePath","fillStrokeShape","Overhead","state","time","Date","toLocaleString","this","interval","setInterval","setState","clearInterval","className","style","backgroundColor","textAlign","color","title","src","Component","sendToastNotification","message","toastTemplate","Toast","toasts","onClose","closeOldestNotification","show","delay","autohide","Header","Body","newToasts","shift","aria-live","aria-atomic","bottom","right","initialMap","domain","plan","problem","a","options","url","method","contentType","headers","data","JSON","stringify","axios","then","response","result","console","error","processCommands","steps","robotLocation","newPathPoint","path","forEach","action","name","includes","generateProblem","tiles","setup","robotString","carsString","carsStatusesString","carsLocationsString","concat","plugins","robot","scenario","Mustache","render","App","licensePlate","robotCommands","resizableCanvas","initialCars","bind","foundCarIndex","newCars","splice","newPath","newColumn","newRow","forced","commands","Navbar","variant","sticky","Brand","Nav","NavDropdown","id","Item","href","Divider","onClick","toggleDebugMode","Container","fluid","Row","Col","xs","Notifications","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67b75119.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/parking-sign.013e9a4f.svg\";","module.exports = __webpack_public_path__ + \"static/media/hub.6baa6daa.svg\";","module.exports = __webpack_public_path__ + \"static/media/robot.2ea3ee93.svg\";","module.exports = __webpack_public_path__ + \"static/media/racecar.e66ab204.svg\";","import React from \"react\";\nimport { Rect, Image } from \"react-konva\";\n\nfunction ParkingLotTile({ mapTile, cars, gridCellSize, parkingImage, carImage }) {\n\n    var occupied = false;\n    var hubColor = [0, \"rgba(63,145,60)\", 1, \"rgba(103,233,98)\"]; // neutral, green\n    for (var i = 0; i < cars.length; i++) {\n        if (cars[i].location.row === mapTile.row && cars[i].location.column === mapTile.column) {\n            if (cars[i].status === \"AwaitingDelivery\")\n                hubColor = [0, \"rgb(189, 130, 42)\", 1, \"rgb(210, 144, 45)\"];\n            occupied = true;\n            break;\n        }\n    }\n\n    return (\n        <>\n            <Rect\n                x={mapTile.column * gridCellSize.width}\n                y={mapTile.row * gridCellSize.height}\n                width={gridCellSize.width}\n                height={gridCellSize.height}\n                fillRadialGradientStartPoint={{ x: gridCellSize.width / 2, y: gridCellSize.height / 2 }}\n                fillRadialGradientEndPoint={{ x: gridCellSize.width / 2, y: gridCellSize.height / 2 }}\n                fillRadialGradientStartRadius={gridCellSize.width > gridCellSize.height ? gridCellSize.height : gridCellSize.width}\n                fillRadialGradientColorStops={hubColor}\n                shadowBlur={5}\n                stroke={\"black\"}\n                strokeWidth={3}\n            />\n            <Image\n                x={mapTile.column * gridCellSize.width}\n                y={mapTile.row * gridCellSize.height + gridCellSize.height / 3.5}\n                width={gridCellSize.width}\n                height={gridCellSize.height / 2}\n                image={parkingImage}\n                shadowBlur={5}\n            />\n            <Image\n                x={mapTile.column * gridCellSize.width}\n                y={mapTile.row * gridCellSize.height}\n                width={gridCellSize.width}\n                height={gridCellSize.height}\n                image={carImage}\n                shadowBlur={5}\n                visible={occupied}\n            />\n        </>\n    );\n}\n\nexport default ParkingLotTile;\n","import React from \"react\";\nimport { Rect, Image } from \"react-konva\";\n\nfunction HubTile({ mapTile, cars, gridCellSize, hubImage, carImage }) {\n\n    var occupied = false;\n    var hubColor = [0, \"rgb(14, 82, 165)\", 1, \"rgb(19, 115, 236)\"]; // neutral, blue\n    for (var i = 0; i < cars.length; i++) {\n        if (cars[i].location.row === mapTile.row && cars[i].location.column === mapTile.column) {\n            if (cars[i].status === \"AwaitingParking\")\n                hubColor = [0, \"rgb(189, 130, 42)\", 1, \"rgb(210, 144, 45)\"];\n            occupied = true;\n            break;\n        }\n    }\n\n    return (\n        <>\n            <Rect\n                x={mapTile.column * gridCellSize.width}\n                y={mapTile.row * gridCellSize.height}\n                width={gridCellSize.width}\n                height={gridCellSize.height}\n                fillRadialGradientStartPoint={{ x: gridCellSize.width / 2, y: gridCellSize.height / 2 }}\n                fillRadialGradientEndPoint={{ x: gridCellSize.width / 2, y: gridCellSize.height / 2 }}\n                fillRadialGradientStartRadius={gridCellSize.width > gridCellSize.height ? gridCellSize.height : gridCellSize.width}\n                fillRadialGradientColorStops={hubColor}\n                shadowBlur={5}\n                stroke={\"black\"}\n                strokeWidth={3}\n            />\n            <Image\n                x={mapTile.column * gridCellSize.width}\n                y={mapTile.row * gridCellSize.height + gridCellSize.height / 4}\n                width={gridCellSize.width}\n                height={gridCellSize.height / 2}\n                image={hubImage}\n                shadowBlur={5}\n            />\n            <Image\n                x={mapTile.column * gridCellSize.width}\n                y={mapTile.row * gridCellSize.height}\n                width={gridCellSize.width}\n                height={gridCellSize.height}\n                image={carImage}\n                shadowBlur={5}\n                visible={occupied}\n            />\n        </>\n    );\n}\n\nexport default HubTile;\n","import React from \"react\";\nimport { Rect, Group, Text } from \"react-konva\";\n\nfunction DebugTile({ mapTile, cars, gridCellSize, debugName }) {\n\n    var prettyCarStatus = \"\";\n    for (var i = 0; i < cars.length; i++) {\n        if (cars[i].location.row === mapTile.y && cars[i].location.column === mapTile.x) {\n            switch (cars[i].status) {\n                case \"AwaitingParking\":\n                    prettyCarStatus = \"Status: Awaiting Parking\";\n                    break;\n                case \"AwaitingDelivery\":\n                    prettyCarStatus = \"Status: Awaiting Delivery\";\n                    break;\n                case null:\n                    if (mapTile.type === \"parking\")\n                        prettyCarStatus = \"Status: Idle\";\n                    else if (mapTile.type === \"hub\")\n                        prettyCarStatus = \"Status: Awaiting Owner\";\n                    break;\n                default:\n                    break;\n            }\n            break;\n        }\n    }\n\n    // const color = 'rgba(220, 220, 220, 0.8)'\n    // const statusButton = {\n    //     position: 'absolute',\n    //     background: color,\n    //     top: mapTile.y * gridCellSize.height + gridCellSize.height * 1.1,\n    //     left: mapTile.x * gridCellSize.width + gridCellSize.width / 13,\n    //     width: gridCellSize.width * 0.95,\n    //     height: gridCellSize.height / 4\n    // }\n    // const typeButton = {\n    //     position: 'absolute',\n    //     background: color,\n    //     top: mapTile.y * gridCellSize.height + gridCellSize.height / 2,\n    //     left: mapTile.x * gridCellSize.width + gridCellSize.width / 13,\n    //     width: gridCellSize.width * 0.95,\n    //     height: gridCellSize.height / 4\n    // }\n\n    // TODO: replace portal with rect\n    // if (mapTile.type === \"hub\")\n    //     portalButtonGroup = <Portal>\n    //         <Button\n    //             variant=\"light\"\n    //             style={typeButton}\n    //         >\n    //             {debugName}\n    //         </Button>\n    //         <Button\n    //             variant=\"light\"\n    //             style={statusButton}\n    //         >\n    //             Available\n    //         </Button>\n    //     </Portal>;\n    // else if (mapTile.type === \"parking\")\n    //     portalButtonGroup = <Portal>\n    //         <Button\n    //             variant=\"light\"\n    //             style={typeButton}\n    //         >\n    //             {debugName}\n    //         </Button>\n    //         <Button\n    //             variant=\"light\"\n    //             style={statusButton}\n    //         >\n    //             Available parking\n    //         </Button>\n    //     </Portal>;\n    // else\n    //     portalButtonGroup = <Portal>\n    //         <Button\n    //             variant=\"light\"\n    //             style={typeButton}\n    //         >\n    //             {debugName}\n    //         </Button>\n    //     </Portal>;\n\n    return (\n        <Group>\n            <Rect\n                x={mapTile.x * gridCellSize.width}\n                y={mapTile.y * gridCellSize.height}\n                width={gridCellSize.width}\n                height={gridCellSize.height}\n                fill={\"rgba(255, 255, 255, 0.3)\"}\n                shadowBlur={5}\n                stroke={\"black\"}\n                strokeWidth={3}\n            />\n            {/* {portalButtonGroup} */}\n            <Text\n                x={mapTile.x * gridCellSize.width + gridCellSize.width / 15}\n                y={mapTile.y * gridCellSize.height + gridCellSize.height / 12}\n                text={\"R\" + mapTile.y + \"C\" + mapTile.x + \" (\" + debugName + \")\"}\n                fontSize={20}\n            />\n            <Text\n                x={mapTile.x * gridCellSize.width + gridCellSize.width / 15}\n                y={mapTile.y * gridCellSize.height + gridCellSize.height / 1.25}\n                text={prettyCarStatus}\n                fontSize={20}\n            />\n        </Group>\n    );\n}\n\nexport default DebugTile;\n","import React from \"react\";\nimport { Group } from \"react-konva\";\nimport useImage from 'use-image';\nimport ParkingLotTile from \"./ParkingLotTile.js\";\nimport HubTile from \"./HubTile.js\";\nimport DebugTile from \"./DebugTile.js\";\nconst parkingURL = require('../../../assets/images/parking-sign.svg');\nconst hubURL = require('../../../assets/images/hub.svg');\n\nfunction Map({ map, cars, gridCellSize, offset, debugMode, carImage }) {\n    const [parkingImage] = useImage(parkingURL);\n    const [hubImage] = useImage(hubURL);\n\n    return (map.map((mapTile, index) => {\n        let tile = null;\n        let debugName = null;\n\n        switch (mapTile.type) {\n            case \"parking\":\n                tile = <ParkingLotTile\n                    mapTile={mapTile}\n                    cars={cars}\n                    gridCellSize={gridCellSize}\n                    parkingImage={parkingImage}\n                    carImage={carImage}\n                />\n                debugName = \"Parking space\";\n                break;\n            case \"hub\":\n                tile = <HubTile\n                    mapTile={mapTile}\n                    cars={cars}\n                    gridCellSize={gridCellSize}\n                    hubImage={hubImage}\n                    carImage={carImage}\n                />\n                debugName = \"Hub\";\n                break;\n            case \"road\":\n                debugName = \"Road\";\n                break;\n            case \"blocked\":\n                debugName = \"Blocked space\";\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <Group\n                key={index}\n                x={offset.x}\n                y={offset.y}>\n                {tile}\n                {debugMode ?\n                    <DebugTile\n                        mapTile={mapTile}\n                        cars={cars}\n                        gridCellSize={gridCellSize}\n                        debugName={debugName}\n                    />\n                    :\n                    null\n                }\n            </Group >\n        );\n    }));\n}\n\nexport default Map;\n","import React from \"react\";\nimport { Image, Arrow } from \"react-konva\";\nimport useImage from 'use-image';\nimport async from 'async';\nconst robotURL = require('../../assets/images/robot.svg');\n\nfunction Robot({ robotGridStaticLocation, carriedCar, shiftPath, gridCellSize, carImage, simulationOn, alreadyActivated, robotPath, removeCar, addCar, gridSize, parkingLotOffset, size, toggleSimulation, changeRobotGridStaticLocation }) {\n    const [robotImage] = useImage(robotURL);\n    const robotImageRef = React.useRef();\n    let pathStop = [];\n\n    for (var i = 0; i < robotPath.length; i++) {\n        let xCoord = parkingLotOffset.x + robotPath[i].column * gridCellSize.width + gridCellSize.width / 2;\n        let yCoord = parkingLotOffset.y + robotPath[i].row * gridCellSize.height + gridCellSize.height / 2;\n        pathStop.push(xCoord);\n        pathStop.push(yCoord);\n    }\n\n    const setScale = (x, y) => {\n        robotImageRef.current.to({\n            scaleX: x,\n            scaleY: y,\n            duration: 0.1\n        });\n    };\n\n    // TODO: STOP SIMULATION\n    if (simulationOn && !alreadyActivated) {\n        var count = 0;\n        async.whilst(\n            () => { return count < robotPath.length - 1; },\n            function (callback) {\n                count++;\n\n                if (robotPath[count - 1].pickupCar)\n                    removeCar(robotPath[count - 1].row, robotPath[count - 1].column);\n                else if (robotPath[count - 1].dropCar)\n                    addCar(robotPath[count - 1].row, robotPath[count - 1].column);\n\n                robotImageRef.current.to({\n                    x: fromGridToCanvas(robotPath[count]).x,\n                    y: fromGridToCanvas(robotPath[count]).y,\n                    duration: 1\n                });\n                setTimeout(callback, 1050);\n                // shiftPath();\n            },\n            function (_err) { // finally\n                if (robotPath[count].pickupCar)\n                    removeCar(robotPath[count].row, robotPath[count].column);\n                else if (robotPath[count].dropCar)\n                    addCar(robotPath[count].row, robotPath[count].column);\n\n                toggleSimulation(false);\n            }\n        );\n    }\n\n    const propToGrid = (robotCanvasLocation) => {\n        const cellColumn = Math.floor((robotCanvasLocation.x + gridCellSize.width / 2) / size.width * gridSize.columns);\n        const cellRow = Math.floor((robotCanvasLocation.y + gridCellSize.height / 2) / size.height * gridSize.rows);\n\n        if (\n            (cellColumn >= 0 && cellColumn < gridSize.columns) && \n            (cellRow >= 0 && cellRow < gridSize.rows)\n            ) {\n            changeRobotGridStaticLocation(cellColumn, cellRow);\n            var canvasLocation = fromGridToCanvas({ column: cellColumn, row: cellRow });\n            robotImageRef.current.to({\n                x: canvasLocation.x,\n                y: canvasLocation.y,\n                duration: 0.1\n            });\n        }\n        else {\n            robotImageRef.current.to({\n                x: fromGridToCanvas(robotGridStaticLocation).x,\n                y: fromGridToCanvas(robotGridStaticLocation).y,\n                duration: 0.1\n            });\n        }\n    };\n\n    function fromGridToCanvas(position) {\n        return {\n            x: parkingLotOffset.x + position.column * gridCellSize.width,\n            y: parkingLotOffset.y + position.row * gridCellSize.height - gridCellSize.height / 50\n        };\n    }\n\n    return (\n        <>\n            {/* Robot's path */}\n            < Arrow\n                points={pathStop}\n                shadowBlur={0.5}\n                stroke={\"black\"}\n                strokeWidth={1.7}\n            />\n            <Image\n                ref={robotImageRef}\n                x={fromGridToCanvas(robotGridStaticLocation).x}\n                y={fromGridToCanvas(robotGridStaticLocation).y}\n                width={gridCellSize.width}\n                height={gridCellSize.height}\n                image={carriedCar !== null ? carImage : robotImage}\n                shadowBlur={0.5}\n                draggable={!simulationOn}\n                onDragStart={() => { setScale(1.2, 1.2) }}\n                onDragEnd={() => {\n                    setScale(1, 1);\n                    propToGrid(robotImageRef.current._lastPos);\n                }}\n            />\n        </>\n    );\n}\n\nexport default Robot;\n","import React, { useState, useEffect } from \"react\";\nimport { Stage, Layer, Shape } from \"react-konva\";\nimport useImage from 'use-image';\nimport Map from './Map/Map';\nimport Robot from \"./Robot\";\nconst carURL = require('../../assets/images/racecar.svg');\n\nfunction Canvas({\n    map,\n    cars,\n    carriedCar,\n    debugMode,\n    robotPath,\n    toggleSimulation,\n    robotGridStaticLocation,\n    gridSize,\n    simulationOn,\n    changeRobotGridStaticLocation,\n    removeCar,\n    addCar,\n    alreadyActivated,\n    resizable,\n    shiftPath\n}) {\n    const [carImage] = useImage(carURL);\n    const parkingLotOffset = { x: 0, y: 0 };\n    const [stageHeight, setStageHeight] = useState(850);\n    // this is 96cm\n    const squareSideHeightRatio = 96 / 288;\n    const upperLeftSquareSide = stageHeight * squareSideHeightRatio;\n    // height is 288cm, width is 401.4cm\n    const widthHeightRatio = 401.4 / 288;\n    const size = { height: stageHeight, width: stageHeight * widthHeightRatio };\n    const gridCellSize = {\n        height: size.height / gridSize.rows,\n        width: size.width / gridSize.columns\n    }\n\n    function checkSize() {\n        setStageHeight(window.innerHeight * 0.9);\n    }\n\n    useEffect(() => {\n        if (resizable) {\n            checkSize();\n            window.addEventListener(\"resize\", checkSize);\n        }\n    }, [resizable]);\n\n\n    return (\n        <Stage\n            width={parkingLotOffset.x + size.width + 5}\n            height={size.height}\n        // style={{\n        //     textAlign: \"center\",\n        //     border: \"3px solid black\",\n        //     background: \"radial-gradient(ellipse at top, #e66465, transparent), radial-gradient(ellipse at bottom, #4d9f0c, transparent)\"\n        // }}\n        >\n            <Layer>\n                <Shape // Parking Lot\n                    x={parkingLotOffset.x}\n                    y={parkingLotOffset.y}\n                    sceneFunc={(context, shape) => {\n                        context.beginPath();\n                        context.moveTo(upperLeftSquareSide, 0);\n                        context.lineTo(upperLeftSquareSide, upperLeftSquareSide);\n                        context.lineTo(0, upperLeftSquareSide);\n                        context.lineTo(0, size.height);\n                        context.lineTo(size.width, size.height);\n                        context.lineTo(size.width, 0);\n                        context.closePath();\n                        // (!) Konva specific method, it is very important\n                        context.fillStrokeShape(shape);\n                    }}\n                    fillRadialGradientStartPoint={{ x: size.width / 2, y: size.height / 2 }}\n                    fillRadialGradientEndPoint={{ x: size.width / 2, y: size.height / 2 }}\n                    fillRadialGradientStartRadius={size.width > size.height ? size.height : size.width}\n                    fillRadialGradientColorStops={[\n                        0, \"rgb(190, 190, 190)\",\n                        1, \"rgb(255, 255, 255)\"\n                    ]}\n                    stroke={\"black\"}\n                    strokeWidth={5}\n                />\n                <Map\n                    map={map}\n                    carImage={carImage}\n                    cars={cars}\n                    debugMode={debugMode}\n                    gridCellSize={gridCellSize}\n                    offset={parkingLotOffset}\n                />\n                <Robot\n                    shiftPath={shiftPath}\n                    carriedCar={carriedCar}\n                    robotGridStaticLocation={robotGridStaticLocation}\n                    gridCellSize={gridCellSize}\n                    carImage={carImage}\n                    simulationOn={simulationOn}\n                    alreadyActivated={alreadyActivated}\n                    robotPath={robotPath}\n                    removeCar={removeCar}\n                    addCar={addCar}\n                    gridSize={gridSize}\n                    parkingLotOffset={parkingLotOffset}\n                    size={size}\n                    toggleSimulation={toggleSimulation}\n                    changeRobotGridStaticLocation={changeRobotGridStaticLocation}\n                />\n            </Layer>\n        </Stage>\n    );\n}\n\nexport default Canvas;\n","import React from \"react\";\n\n\nclass Overhead extends React.Component {\n    constructor() {\n        super();\n        this.state = { time: new Date().toLocaleString() };\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.setState({ time: new Date().toLocaleString() }), 300);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <div\n                className=\"pt-3\"\n                style={{\n                    height: \"94vh\", // relative to the height of the viewport\n                    backgroundColor: \"#282c34\",\n                    textAlign: \"center\",\n                    color: \"white\"\n                }}\n            >\n                <header className=\"App-header\">\n                    <h3 className=\"mb-3\"> {this.state.time} UTC </h3>\n                </header>\n                <iframe\n                    title=\"cctv\"\n                    src=\"http://127.0.0.1:8081/stream.ogg\"\n                    width={window.innerHeight}\n                    height={window.innerHeight * 0.8}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Overhead;\n","import React from \"react\";\nimport { Toast } from \"react-bootstrap\";\nimport { GoGear } from 'react-icons/go';\n\nclass Overhead extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            toasts: [],\n        };\n    }\n\n    sendToastNotification = (message) => {\n        const toastTemplate = (\n            <Toast\n                key={this.state.toasts.length + 1}\n                onClose={() => this.closeOldestNotification()}\n                show={true}\n                delay={3000}\n                autohide\n            >\n                <Toast.Header>\n                    <GoGear />\n                    <strong className=\"mr-auto ml-2\">Replanning...</strong>\n                    just now\n          </Toast.Header>\n                <Toast.Body>\n                    <h6 style={{ color: \"rgb(70, 70, 70)\" }}>{message}</h6>\n                </Toast.Body>\n            </Toast>\n        );\n\n        var newToasts = this.state.toasts;\n        newToasts.push(toastTemplate)\n        this.setState({\n            toasts: newToasts\n        });\n    }\n\n    closeOldestNotification() {\n        var newToasts = this.state.toasts;\n        newToasts.shift();\n        this.setState({\n            toasts: newToasts\n        });\n    }\n\n    componentDidMount() {\n      this.sendToastNotification(\"A new car has arrived at hub R4C0!\");\n      this.sendToastNotification(\"A car is now awaiting delivery at hub R2C3!\");\n      this.sendToastNotification(\"A new car has arrived at hub R4C0!\");\n      this.sendToastNotification(\"A new obstacle was detected!\");\n      this.sendToastNotification(\"A new obstacle was detected!\");\n    }\n\n    render() {\n        return (\n            <div\n                aria-live=\"polite\"\n                aria-atomic=\"true\"\n                style={{\n                    position: 'absolute',\n                    bottom: 0,\n                    right: 20\n                }}\n            >\n                {this.state.toasts}\n            </div>\n        );\n    }\n}\n\nexport default Overhead;\n","const initialMap = [\n    {\n        \"column\": 0,\n        \"row\": 0,\n        \"type\": \"blocked\"\n    },\n    {\n        \"column\": 1,\n        \"row\": 0,\n        \"type\": \"parking\"\n    },\n    {\n        \"column\": 2,\n        \"row\": 0,\n        \"type\": \"road\"\n    },\n    {\n        \"column\": 3,\n        \"row\": 0,\n        \"type\": \"parking\"\n    },\n    {\n        \"column\": 0,\n        \"row\": 1,\n        \"type\": \"blocked\"\n    },\n    {\n        \"column\": 1,\n        \"row\": 1,\n        \"type\": \"parking\"\n    },\n    {\n        \"column\": 2,\n        \"row\": 1,\n        \"type\": \"road\"\n    },\n    {\n        \"column\": 3,\n        \"row\": 1,\n        \"type\": \"parking\"\n    },\n    {\n        \"column\": 0,\n        \"row\": 2,\n        \"type\": \"hub\"\n    },\n    {\n        \"column\": 1,\n        \"row\": 2,\n        \"type\": \"road\"\n    },\n    {\n        \"column\": 2,\n        \"row\": 2,\n        \"type\": \"road\"\n    },\n    {\n        \"column\": 3,\n        \"row\": 2,\n        \"type\": \"parking\"\n    },\n    {\n        \"column\": 0,\n        \"row\": 3,\n        \"type\": \"hub\"\n    },\n    {\n        \"column\": 1,\n        \"row\": 3,\n        \"type\": \"road\"\n    },\n    {\n        \"column\": 2,\n        \"row\": 3,\n        \"type\": \"road\"\n    },\n    {\n        \"column\": 3,\n        \"row\": 3,\n        \"type\": \"parking\"\n    },\n    {\n        \"column\": 0,\n        \"row\": 4,\n        \"type\": \"hub\"\n    },\n    {\n        \"column\": 1,\n        \"row\": 4,\n        \"type\": \"road\"\n    },\n    {\n        \"column\": 2,\n        \"row\": 4,\n        \"type\": \"road\"\n    },\n    {\n        \"column\": 3,\n        \"row\": 4,\n        \"type\": \"parking\"\n    }\n];\n\nexport default initialMap;","var domain = ';; Authors: Theodor Amariucai & Bora M. Alper (in no particular order)\\n\\n(define (domain finitech)\\n    (:requirements :adl :typing :negative-preconditions :strips)\\n\\n    (:types\\n        blockedTile - tile  ;; physically inaccessible \\n        roadTile - tile\\n        parkingTile - tile\\n        hubTile - tile\\n        \\n        car - dynamic  ;; cars can only be moved around with the help of the robot\\n        robot - dynamic\\n    )\\n\\n    (:predicates\\n        ;; TODO: enforce that one and only one is true at a given time\\n        (TemporarilyBlocked ?t - tile)\\n\\n        ;; The car is waiting to be parked\\n        (AwaitingParking ?c - car)\\n        ;; The car is waiting for delivery\\n        (AwaitingDelivery ?c - car)\\n        ;; Otherwise the car is waiting for its owner\\n\\n        ;; ?a IsToTheLeftOf/IsAbove ?b\\n        (IsToTheLeftOf ?a - tile ?b - tile)\\n        (IsAbove ?a - tile ?b - tile)\\n\\n        (IsAt ?m - dynamic ?t - tile)\\n\\n        (IsCarrying ?r - robot ?c - car)\\n    )\\n\\n    ;;;;;; WE ASSUME HORIZONTAL TILES!\\n\\n    ;;;; Action Template - Delete and fill in own actions ;;;;\\n    (:action go-left\\n        :parameters (?r - robot ?f - tile ?t - roadTile)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?t ?f)\\n            (not (TemporarilyBlocked ?t))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n        )\\n    )\\n\\n    (:action go-right\\n        :parameters (?r - robot ?f - tile ?t - roadTile)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?f ?t)\\n            (not (TemporarilyBlocked ?t))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n        )\\n    )\\n\\n    (:action go-up\\n        :parameters (?r - robot ?f - roadTile ?t - roadTile)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsAbove ?t ?f)\\n            (not (TemporarilyBlocked ?t))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n        )\\n    )\\n\\n    (:action go-down\\n        :parameters (?r - robot ?f - roadTile ?t - roadTile)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsAbove ?f ?t)\\n            (not (TemporarilyBlocked ?t))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n        )\\n    )\\n\\n    ;; 1) scan\\n    ;; 2) slide under\\n    ;; 3) lift\\n    ;; END\\n    (:action pickup-car-leftwards\\n        :parameters (?r - robot ?f - roadTile ?t - hubTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsAt ?c ?t)\\n            (IsToTheLeftOf ?t ?f)\\n            \\n            (not (exists (?c2 - car) (and (IsCarrying ?r ?c2))))\\n            (AwaitingParking ?c)\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (not (IsAt ?c ?t))\\n            (IsAt ?r ?t)\\n            \\n            (IsCarrying ?r ?c)\\n        )\\n    )\\n\\n    (:action dropoff-car-leftwards\\n        :parameters (?r - robot ?f - roadTile ?t - hubTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?t ?f)\\n            \\n            (IsCarrying ?r ?c)\\n            (not (exists (?c2 - car) (IsAt ?c2 ?t)))\\n            ;; Necessary? (AwaitingDelivery ?c)\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            (IsAt ?c ?t)\\n            \\n            (not (IsCarrying ?r ?c))\\n            (not (AwaitingDelivery ?c))\\n        )\\n    )\\n\\n    (:action park-car-rightwards\\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?f ?t)\\n            \\n            (not (exists (?c2 - car) (IsAt ?c2 ?t)))\\n            (IsCarrying ?r ?c)\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            \\n            (not (IsCarrying ?r ?c))\\n            (IsAt ?c ?t)\\n            (not (AwaitingParking ?c))\\n        )\\n    )\\n\\n    (:action park-car-leftwards\\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?t ?f)\\n            \\n            (not (exists (?c2 - car) (IsAt ?c2 ?t)))\\n            (IsCarrying ?r ?c)\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            \\n            (not (IsCarrying ?r ?c))\\n            (IsAt ?c ?t)\\n            (not (AwaitingParking ?c))\\n        )\\n    )\\n\\n    ;;;;\\n\\n    (:action retrieve-car-rightwards\\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?f ?t)\\n            \\n            (AwaitingDelivery ?c)\\n            (IsAt ?c ?t)\\n            \\n            (not (exists (?c2 - car) (and\\n                (IsCarrying ?r ?c2)\\n            )))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            \\n            (not (IsAt ?c ?t))\\n            (IsCarrying ?r ?c)\\n        )\\n    )\\n\\n    (:action retrieve-car-leftwards\\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?t ?f)\\n            \\n            (AwaitingDelivery ?c)\\n            (IsAt ?c ?t)\\n            \\n            (not (exists (?c2 - car) (and\\n                (IsCarrying ?r ?c2)\\n            )))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            \\n            (not (IsAt ?c ?t))\\n            (IsCarrying ?r ?c)\\n        )\\n    )\\n\\n)\\n\\n';\nexport default domain;","import domain from '../assets/planner/domain/domain.js';\nimport axios from 'axios';\n\nexport default async function plan(problem) {\n    const options = {\n        url: 'http://solver.planning.domains/solve-and-validate',\n        method: 'POST',\n        contentType: 'application/json',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json;charset=UTF-8'\n        },\n        data: JSON.stringify({\n            \"domain\": domain,\n            \"problem\": problem\n        })\n    };\n\n    return await axios(options)\n        .then(response => {\n            if (response['data']['status'] === 'ok') {\n                return response.data.result.plan;\n            } else {\n                console.error(\"Online planner at `http://solver.planning.domains/solve-and-validate` failed:\\n\\n\" + response.data.result.error);\n                return -1;\n            }\n        });\n}","export default function processCommands(steps, robotLocation) {\n    let newPathPoint = { column: robotLocation.column, row: robotLocation.row };\n    let path = [newPathPoint];\n    steps.forEach(action => {\n        if (action.name.includes(\"go-up\")) {\n            newPathPoint = { column: newPathPoint.column, row: newPathPoint.row - 1 };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"go-down\")) {\n            newPathPoint = { column: newPathPoint.column, row: newPathPoint.row + 1 };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"go-right\")) {\n            newPathPoint = { column: newPathPoint.column + 1, row: newPathPoint.row };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"park-car-rightwards\")) {\n            newPathPoint = { dropCar: true, column: newPathPoint.column + 1, row: newPathPoint.row };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"retrieve-car-rightwards\")) {\n            newPathPoint = { pickupCar: true, column: newPathPoint.column + 1, row: newPathPoint.row };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"dropoff-car-leftwards\") ||\n            action.name.includes(\"park-car-leftwards\")) {\n            newPathPoint = { dropCar: true, column: newPathPoint.column - 1, row: newPathPoint.row };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"pickup-car-leftwards\") ||\n            action.name.includes(\"retrieve-car-leftwards\")) {\n            newPathPoint = { pickupCar: true, column: newPathPoint.column - 1, row: newPathPoint.row };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"go-left\")) {\n            newPathPoint = { column: newPathPoint.column - 1, row: newPathPoint.row };\n            path.push(newPathPoint)\n        }\n    })\n    return path;\n};","import Mustache from 'mustache';\n\nfunction generateProblem(robotGridStaticLocation, cars, tiles, setup) {\n\n    let robotString = \"(IsAt Robot R\" + robotGridStaticLocation.row + \"C\" + robotGridStaticLocation.column + \")\\n\";\n    let carsString = \"\";\n    let carsStatusesString = \"\";\n    let carsLocationsString = \"\";\n\n    for (var i = 0; i < cars.length; i++) {\n        carsString = carsString.concat(\"Car\" + i + \" - car\\n\");\n        carsLocationsString = carsLocationsString.concat(\"(IsAt Car\" + i + \" R\" + cars[i].location.row + \"C\" + cars[i].location.column + \")\\n\");\n        if (cars[i].status !== null)\n            carsStatusesString = carsStatusesString.concat(\"(\" + cars[i].status + \" Car\" + i + \")\\n\");\n    }\n\n    var plugins = {\n        robot: \"Robot - robot\",\n        cars: carsString,\n        tiles: `\n        R0C0 - blockedTile\\n        \n        R0C1 - parkingTile\\n        \n        R0C2 - roadTile\\n        \n        R0C3 - parkingTile\\n        \n        R1C0 - blockedTile\\n        \n        R1C1 - parkingTile\\n        \n        R1C2 - roadTile\\n\n        R1C3 - parkingTile\\n\n        R2C0 - hubTile\\n\n        R2C1 - roadTile\\n\n        R2C2 - roadTile\\n \n        R2C3 - parkingTile\\n\n        R3C0 - hubTile\\n \n        R3C1 - roadTile\\n \n        R3C2 - roadTile\\n        \n        R3C3 - parkingTile\\n        \n        R4C0 - hubTile\\n        \n        R4C1 - roadTile\\n        \n        R4C2 - roadTile\\n        \n        R4C3 - parkingTile\\n    \n        `,\n        scenario: robotString + carsLocationsString + carsStatusesString,\n        setup: `\n        (IsToTheLeftOf R0C0 R0C1)\\n        \n        (IsToTheLeftOf R0C1 R0C2)\\n        \n        (IsToTheLeftOf R0C2 R0C3)\\n        \n        (IsToTheLeftOf R1C0 R1C1)\\n        \n        (IsToTheLeftOf R1C1 R1C2)\\n        \n        (IsToTheLeftOf R1C2 R1C3)\\n        \n        (IsToTheLeftOf R2C0 R2C1)\\n        \n        (IsToTheLeftOf R2C1 R2C2)\\n        \n        (IsToTheLeftOf R2C2 R2C3)\\n        \n        (IsToTheLeftOf R3C0 R3C1)\\n        \n        (IsToTheLeftOf R3C1 R3C2)\\n        \n        (IsToTheLeftOf R3C2 R3C3)\\n        \n        (IsToTheLeftOf R4C0 R4C1)\\n        \n        (IsToTheLeftOf R4C1 R4C2)\\n        \n        (IsToTheLeftOf R4C2 R4C3)\\n\n        \\n        \n        (IsAbove R0C0 R1C0)\\n        \n        (IsAbove R0C1 R1C1)\\n        \n        (IsAbove R0C2 R1C2)\\n        \n        (IsAbove R0C3 R1C3)\\n        \n        (IsAbove R1C0 R2C0)\\n        \n        (IsAbove R1C1 R2C1)\\n        \n        (IsAbove R1C2 R2C2)\\n        \n        (IsAbove R1C3 R2C3)\\n        \n        (IsAbove R2C0 R3C0)\\n        \n        (IsAbove R2C1 R3C1)\\n        \n        (IsAbove R2C2 R3C2)\\n        \n        (IsAbove R2C3 R3C3)\\n        \n        (IsAbove R3C0 R4C0)\\n        \n        (IsAbove R3C1 R4C1)\\n        \n        (IsAbove R3C2 R4C2)\\n        \n        (IsAbove R3C3 R4C3)\\n    \n        `\n    };\n\n    return Mustache.render(`\n    ;; Authors: Theodor Amariucai & Bora M. Alper (in no particular order)\n    \\n\\n\n    (define (problem parking)\\n    \n    (:domain finitech)\\n    \n    \\n    \n    (:objects\\n        \n        {{robot}}\n        \\n       \n        {{cars}}       \n        \\n        \n        {{tiles}}\n    )\n    \\n\\n    \n    (:init\\n        \n        {{scenario}}\n        \\n        \n        {{setup}}\n    )\n    \\n\\n    \n    (:goal (and\\n        \n        (not (exists (?c - car) (or\\n            \n            (AwaitingParking ?c)\\n            \n            (AwaitingDelivery ?c)\\n        \n        )))\\n    \n    ))\\n)\\n\\n\n    `, plugins);\n}\n\nexport default generateProblem;","import React from 'react';\nimport Canvas from './canvas/Canvas';\nimport Overhead from './cameras/Overhead';\nimport Notifications from './Notifications';\nimport './App.css';\nimport initialMap from '../assets/initialMap';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Navbar, Nav, NavDropdown, Container, Row, Col } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport plan from '../actions/plan';\nimport processCommands from '../actions/processCommands';\nimport generateProblem from '../actions/generateProblem.js';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      cars: [\n        { location: { row: 0, column: 1 }, licensePlate: \"SAG 984\", status: \"AwaitingDelivery\" },\n        { location: { row: 2, column: 3 }, licensePlate: \"SBG 985\", status: \"AwaitingDelivery\" },\n        { location: { row: 4, column: 3 }, licensePlate: \"SBG 985\", status: null },\n        { location: { row: 2, column: 0 }, licensePlate: \"SDG 987\", status: null },\n        { location: { row: 4, column: 0 }, licensePlate: \"SEG 988\", status: \"AwaitingParking\" },\n      ],\n      map: initialMap,\n      carriedCar: null,\n      robotGridStaticLocation: { column: 1, row: 4 },\n      robotCommands: [],\n      debugMode: false,\n      gridSize: { rows: 5, columns: 4 },\n      simulationOn: false,\n      alreadyActivated: false,\n      resizableCanvas: false,\n    };\n    this.initialCars = this.state.cars;\n    this.toggleSimulation = this.toggleSimulation.bind(this);\n    this.shiftPath = this.shiftPath.bind(this);\n    this.removeCar = this.removeCar.bind(this);\n    this.addCar = this.addCar.bind(this);\n    this.changeRobotGridStaticLocation = this.changeRobotGridStaticLocation.bind(this);\n  }\n\n  removeCar(row, column) {\n    var foundCarIndex = null;\n    for (var i = 0; i < this.state.cars.length; i++) {\n      if (this.state.cars[i].location.row === row && this.state.cars[i].location.column === column) {\n        foundCarIndex = i;\n        break;\n      }\n    }\n\n    if (foundCarIndex !== null) {\n      let newCars = [...this.state.cars];\n      newCars.splice(foundCarIndex, 1);\n      this.setState({\n        carriedCar: this.state.cars[foundCarIndex],\n        cars: newCars,\n      });\n    }\n  }\n\n  addCar(row, column) {\n    var foundCarIndex = null;\n    for (var i = 0; i < this.state.cars.length; i++) {\n      if (this.state.cars[i].location.row === row && this.state.cars[i].location.column === column) {\n        foundCarIndex = i;\n        break;\n      }\n    }\n\n    if (foundCarIndex === null) {\n      let newCars = [...this.state.cars];\n      newCars.push({\n        location: { row: row, column: column },\n        licensePlate: this.state.carriedCar.licensePlate,\n        status: null // after AwaitingParking car is simply idle, after AwaitingDelivery car is awaiting owner\n      });\n      this.setState({\n        carriedCar: null,\n        cars: newCars\n      });\n    }\n  }\n\n  shiftPath() {\n    let newPath = [...this.state.robotCommands].shift();\n    this.setState({\n      robotCommands: newPath\n    });\n  }\n\n  changeRobotGridStaticLocation(newColumn, newRow) {\n    this.setState({\n      robotGridStaticLocation: { column: newColumn, row: newRow }\n    });\n  }\n\n  async toggleSimulation(forced) {\n    if (this.state.simulationOn) {\n      if (forced) {\n        // not working\n        this.setState({ robotPath: [], simulationOn: false });\n      }\n      else\n        this.setState({ simulationOn: false, alreadyActivated: false });\n    } else {\n      let commands = await plan(generateProblem(\n        this.state.robotGridStaticLocation,\n        this.state.cars,\n        null,\n        null));\n      if (commands !== -1) {\n        this.setState({\n          robotCommands: processCommands(commands, this.state.robotGridStaticLocation),\n          simulationOn: true,\n          alreadyActivated: false\n        }, () => { this.setState({ alreadyActivated: true }) });\n      }\n    }\n  }\n\n  toggleDebugMode() {\n    this.setState({\n      debugMode: !this.state.debugMode\n    });\n  }\n\n  render() {\n    return (\n      <Router>\n        <Navbar\n          variant=\"dark\"\n          sticky=\"top\"\n          style={{\n            width: \"1920px\"\n          }}\n        >\n          <Navbar.Brand>Finitech Operations Monitor</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <NavDropdown title=\"Parking Lot\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#/\">View</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item\n                onClick={() => { this.toggleDebugMode(); }}\n              >Debug Mode\n              </NavDropdown.Item>\n              <NavDropdown.Item\n                onClick={() => { this.toggleSimulation(true) }}\n              >Toggle Simulation\n              </NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown title=\"Cameras\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item {... !this.state.simulationOn ? { href: \"#/overhead\" } : {}}>CCTV</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar>\n\n        <Switch>\n          <Route path=\"/overhead\">\n            <Overhead />\n          </Route>\n          <Route path=\"/\">\n            <div\n              style={{\n                height: \"877px\",\n                width: \"1920px\",\n                backgroundColor: \"#282c34\"\n              }}\n              className=\"pt-3\"\n            >\n              <Container fluid>\n                <Row>\n                  <Col xs={8}>\n                    <Canvas\n                      map={this.state.map}\n                      shiftPath={this.shiftPath}\n                      carriedCar={this.state.carriedCar}\n                      resizable={this.state.resizableCanvas}\n                      alreadyActivated={this.state.alreadyActivated}\n                      removeCar={this.removeCar}\n                      addCar={this.addCar}\n                      toggleSimulation={this.toggleSimulation}\n                      changeRobotGridStaticLocation={this.changeRobotGridStaticLocation}\n                      simulationOn={this.state.simulationOn}\n                      gridSize={this.state.gridSize}\n                      robotGridStaticLocation={this.state.robotGridStaticLocation}\n                      robotPath={this.state.robotCommands}\n                      debugMode={this.state.debugMode}\n                      cars={this.state.cars}\n                    />\n                  </Col>\n                  <Col xs={4}>\n                    <Notifications />\n                  </Col>\n                </Row>\n              </Container>\n            </div>\n          </Route>\n        </Switch>\n      </Router >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}