var domain = ';; Authors: Theodor Amariucai & Bora M. Alper (in no particular order)\n\n(define (domain finitech)\n    (:requirements :adl :typing :negative-preconditions :strips)\n\n    (:types\n        blockedTile - tile  ;; physically inaccessible \n        roadTile - tile\n        parkingTile - tile\n        hubTile - tile\n        \n        car - dynamic  ;; cars can only be moved around with the help of the robot\n        robot - dynamic\n    )\n\n    (:predicates\n        ;; TODO: enforce that one and only one is true at a given time\n        (TemporarilyBlocked ?t - tile)\n\n        ;; The car is waiting to be parked\n        (AwaitingParking ?c - car)\n        ;; The car is waiting for delivery\n        (AwaitingDelivery ?c - car)\n        ;; Otherwise the car is waiting for its owner\n\n        ;; ?a IsToTheLeftOf/IsAbove ?b\n        (IsToTheLeftOf ?a - tile ?b - tile)\n        (IsAbove ?a - tile ?b - tile)\n\n        (IsAt ?m - dynamic ?t - tile)\n\n        (IsCarrying ?r - robot ?c - car)\n    )\n\n    ;;;;;; WE ASSUME HORIZONTAL TILES!\n\n    ;;;; Action Template - Delete and fill in own actions ;;;;\n    (:action go-left\n        :parameters (?r - robot ?f - tile ?t - roadTile)\n        :precondition (and\n            (IsAt ?r ?f)\n            (IsToTheLeftOf ?t ?f)\n            (not (TemporarilyBlocked ?t))\n        )\n        :effect (and\n            (not (IsAt ?r ?f))\n            (IsAt ?r ?t)\n        )\n    )\n\n    (:action go-right\n        :parameters (?r - robot ?f - tile ?t - roadTile)\n        :precondition (and\n            (IsAt ?r ?f)\n            (IsToTheLeftOf ?f ?t)\n            (not (TemporarilyBlocked ?t))\n        )\n        :effect (and\n            (not (IsAt ?r ?f))\n            (IsAt ?r ?t)\n        )\n    )\n\n    (:action go-up\n        :parameters (?r - robot ?f - roadTile ?t - roadTile)\n        :precondition (and\n            (IsAt ?r ?f)\n            (IsAbove ?t ?f)\n            (not (TemporarilyBlocked ?t))\n        )\n        :effect (and\n            (not (IsAt ?r ?f))\n            (IsAt ?r ?t)\n        )\n    )\n\n    (:action go-down\n        :parameters (?r - robot ?f - roadTile ?t - roadTile)\n        :precondition (and\n            (IsAt ?r ?f)\n            (IsAbove ?f ?t)\n            (not (TemporarilyBlocked ?t))\n        )\n        :effect (and\n            (not (IsAt ?r ?f))\n            (IsAt ?r ?t)\n        )\n    )\n\n    ;; 1) scan\n    ;; 2) slide under\n    ;; 3) lift\n    ;; END\n    (:action pickup-car-leftwards\n        :parameters (?r - robot ?f - roadTile ?t - hubTile ?c - car)\n        :precondition (and\n            (IsAt ?r ?f)\n            (IsAt ?c ?t)\n            (IsToTheLeftOf ?t ?f)\n            \n            (not (exists (?c2 - car) (and (IsCarrying ?r ?c2))))\n            (AwaitingParking ?c)\n        )\n        :effect (and\n            (not (IsAt ?r ?f))\n            (not (IsAt ?c ?t))\n            (IsAt ?r ?t)\n            \n            (IsCarrying ?r ?c)\n        )\n    )\n\n    (:action dropoff-car-leftwards\n        :parameters (?r - robot ?f - roadTile ?t - hubTile ?c - car)\n        :precondition (and\n            (IsAt ?r ?f)\n            (IsToTheLeftOf ?t ?f)\n            \n            (IsCarrying ?r ?c)\n            (not (exists (?c2 - car) (IsAt ?c2 ?t)))\n            ;; Necessary? (AwaitingDelivery ?c)\n        )\n        :effect (and\n            (not (IsAt ?r ?f))\n            (IsAt ?r ?t)\n            (IsAt ?c ?t)\n            \n            (not (IsCarrying ?r ?c))\n            (not (AwaitingDelivery ?c))\n        )\n    )\n\n    (:action park-car-rightwards\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\n        :precondition (and\n            (IsAt ?r ?f)\n            (IsToTheLeftOf ?f ?t)\n            \n            (not (exists (?c2 - car) (IsAt ?c2 ?t)))\n            (IsCarrying ?r ?c)\n        )\n        :effect (and\n            (not (IsAt ?r ?f))\n            (IsAt ?r ?t)\n            \n            (not (IsCarrying ?r ?c))\n            (IsAt ?c ?t)\n            (not (AwaitingParking ?c))\n        )\n    )\n\n    (:action park-car-leftwards\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\n        :precondition (and\n            (IsAt ?r ?f)\n            (IsToTheLeftOf ?t ?f)\n            \n            (not (exists (?c2 - car) (IsAt ?c2 ?t)))\n            (IsCarrying ?r ?c)\n        )\n        :effect (and\n            (not (IsAt ?r ?f))\n            (IsAt ?r ?t)\n            \n            (not (IsCarrying ?r ?c))\n            (IsAt ?c ?t)\n            (not (AwaitingParking ?c))\n        )\n    )\n\n    ;;;;\n\n    (:action retrieve-car-rightwards\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\n        :precondition (and\n            (IsAt ?r ?f)\n            (IsToTheLeftOf ?f ?t)\n            \n            (AwaitingDelivery ?c)\n            (IsAt ?c ?t)\n            \n            (not (exists (?c2 - car) (and\n                (IsCarrying ?r ?c2)\n            )))\n        )\n        :effect (and\n            (not (IsAt ?r ?f))\n            (IsAt ?r ?t)\n            \n            (not (IsAt ?c ?t))\n            (IsCarrying ?r ?c)\n        )\n    )\n\n    (:action retrieve-car-leftwards\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\n        :precondition (and\n            (IsAt ?r ?f)\n            (IsToTheLeftOf ?t ?f)\n            \n            (AwaitingDelivery ?c)\n            (IsAt ?c ?t)\n            \n            (not (exists (?c2 - car) (and\n                (IsCarrying ?r ?c2)\n            )))\n        )\n        :effect (and\n            (not (IsAt ?r ?f))\n            (IsAt ?r ?t)\n            \n            (not (IsAt ?c ?t))\n            (IsCarrying ?r ?c)\n        )\n    )\n\n)\n\n';
export default domain;