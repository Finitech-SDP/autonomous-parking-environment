{"version":3,"sources":["assets/images/parking-sign.svg","assets/images/hub.svg","assets/images/robot.svg","assets/images/racecar.svg","components/canvas/RobotPath.js","components/canvas/Map/ParkingLotTile.js","components/canvas/Map/HubTile.js","components/canvas/Map/DebugTile.js","components/canvas/Map/Map.js","components/canvas/Robot.js","components/canvas/Canvas.js","components/cameras/Overhead.js","assets/planner/domain/domain.js","actions/plan.js","actions/processCommands.js","actions/generateProblem.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","RobotPath","robotPath","parkingLotOffset","gridCellSize","pathStop","forEach","step","xCoord","x","column","width","yCoord","y","row","height","push","points","shadowBlur","stroke","strokeWidth","ParkingLotTile","parkingLot","spacesAvailable","parkingImage","carImage","occupied","includes","fillRadialGradientStartPoint","fillRadialGradientEndPoint","fillRadialGradientStartRadius","fillRadialGradientColorStops","image","visible","HubTile","hubImage","DebugTile","mapTile","hasStatus","debugName","fill","text","fontSize","type","parkingURL","require","hubURL","Map","offset","debugMode","useImage","parkingLotLayout","map","index","tile","key","robotURL","Robot","robotGridStaticLocation","simulationOn","alreadyActivated","setSpaceAvailable","setSpaceBusy","gridSize","size","toggleSimulation","changeRobotGridStaticLocation","useState","isCarryingCar","setIsCarryingCar","robotImage","robotImageRef","React","useRef","setScale","current","to","scaleX","scaleY","duration","count","async","whilst","length","callback","pickupCar","dropCar","fromGridToCanvas","setTimeout","_err","position","ref","draggable","onDragStart","onDragEnd","robotCanvasLocation","cellColumn","Math","floor","columns","cellRow","rows","canvasLocation","propToGrid","_lastPos","carURL","Canvas","resizable","stageHeight","setStageHeight","upperLeftSquareSide","checkSize","window","innerHeight","useEffect","addEventListener","sceneFunc","context","shape","beginPath","moveTo","lineTo","closePath","fillStrokeShape","Overhead","state","time","Date","toLocaleString","this","interval","setInterval","setState","clearInterval","className","style","backgroundColor","textAlign","color","controls","autoPlay","innerWidth","src","Component","domain","plan","problem","a","options","url","method","contentType","headers","data","JSON","stringify","axios","then","response","result","processCommands","steps","robotLocation","newPathPoint","path","action","name","generateProblem","robot","cars","tiles","scenario","setup","Mustache","render","App","sendToastNotification","message","toastTemplate","Toast","toasts","onClose","closeOldestNotification","show","delay","autohide","Header","Body","newToasts","robotCommands","resizableCanvas","initialSpacesAvailable","bind","thisSpace","toModifySpacesAvailable","splice","indexOf","newColumn","newRow","shift","forced","commands","console","log","Navbar","variant","sticky","Brand","Nav","NavDropdown","title","id","Item","href","Divider","onClick","toggleDebugMode","Container","fluid","Row","Col","xs","aria-live","aria-atomic","bottom","right","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb63c65b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/parking-sign.013e9a4f.svg\";","module.exports = __webpack_public_path__ + \"static/media/hub.6baa6daa.svg\";","module.exports = __webpack_public_path__ + \"static/media/robot.2ea3ee93.svg\";","module.exports = __webpack_public_path__ + \"static/media/racecar.e66ab204.svg\";","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Arrow } from \"react-konva\";\n\nfunction RobotPath({ robotPath, parkingLotOffset, gridCellSize }) {\n    let pathStop = [];\n    robotPath.forEach(step => {\n        let xCoord = parkingLotOffset.x + step.column * gridCellSize.width + gridCellSize.width / 2;\n        let yCoord = parkingLotOffset.y + step.row * gridCellSize.height + gridCellSize.height / 2;\n        pathStop.push(xCoord);\n        pathStop.push(yCoord);\n    });\n\n    return (<>{\n        < Arrow\n            points={pathStop}\n            shadowBlur={0.5}\n            stroke={\"black\"}\n            strokeWidth={1.7}\n        />}</>\n    );\n}\n\nRobotPath.propTypes = {\n    robotPath: PropTypes.array.isRequired,\n    parkingLotOffset: PropTypes.object.isRequired,\n    gridCellSize: PropTypes.object.isRequired\n};\n\nexport default RobotPath;\n","import React from \"react\";\nimport { Rect, Image } from \"react-konva\";\n\nfunction ParkingLotTile({ parkingLot, spacesAvailable, gridCellSize, parkingImage, carImage }) {\n\n    let occupied = !spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x);\n\n    return (\n        <>\n            <Rect\n                x={parkingLot.x * gridCellSize.width}\n                y={parkingLot.y * gridCellSize.height}\n                width={gridCellSize.width}\n                height={gridCellSize.height}\n                fillRadialGradientStartPoint={{ x: gridCellSize.width / 2, y: gridCellSize.height / 2 }}\n                fillRadialGradientEndPoint={{ x: gridCellSize.width / 2, y: gridCellSize.height / 2 }}\n                fillRadialGradientStartRadius={gridCellSize.width > gridCellSize.height ? gridCellSize.height : gridCellSize.width}\n                fillRadialGradientColorStops={\n                    spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x) ?\n                        [0, \"rgba(63,145,60)\", 1, \"rgba(103,233,98)\"] :\n                        [0, \"rgba(141,38,38)\", 1, \"rgba(230,67,67)\"]\n                }\n                shadowBlur={5}\n                stroke={\"black\"}\n                strokeWidth={3}\n            />\n            <Image\n                x={parkingLot.x * gridCellSize.width}\n                y={parkingLot.y * gridCellSize.height + gridCellSize.height / 3.5}\n                width={gridCellSize.width}\n                height={gridCellSize.height / 2}\n                image={parkingImage}\n                shadowBlur={5}\n            />\n            <Image\n                x={parkingLot.x * gridCellSize.width}\n                y={parkingLot.y * gridCellSize.height}\n                width={gridCellSize.width}\n                height={gridCellSize.height}\n                image={carImage}\n                shadowBlur={5}\n                visible={occupied}\n            />\n        </>\n    );\n}\n\nexport default ParkingLotTile;\n","import React from \"react\";\nimport { Rect, Image } from \"react-konva\";\n\nfunction HubTile({ parkingLot, spacesAvailable, gridCellSize, hubImage, carImage }) {\n\n    let occupied = !spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x);\n\n    return (\n        <>\n            <Rect\n                x={parkingLot.x * gridCellSize.width}\n                y={parkingLot.y * gridCellSize.height}\n                width={gridCellSize.width}\n                height={gridCellSize.height}\n                fillRadialGradientStartPoint={{ x: gridCellSize.width / 2, y: gridCellSize.height / 2 }}\n                fillRadialGradientEndPoint={{ x: gridCellSize.width / 2, y: gridCellSize.height / 2 }}\n                fillRadialGradientStartRadius={gridCellSize.width > gridCellSize.height ? gridCellSize.height : gridCellSize.width}\n                fillRadialGradientColorStops={\n                    occupied ?\n                        [0, \"rgb(189, 130, 42)\", 1, \"rgb(210, 144, 45)\"] :\n                        [0, \"rgb(14, 82, 165)\", 1, \"rgb(19, 115, 236)\"]\n                }\n                shadowBlur={5}\n                stroke={\"black\"}\n                strokeWidth={3}\n            />\n            <Image\n                x={parkingLot.x * gridCellSize.width}\n                y={parkingLot.y * gridCellSize.height + gridCellSize.height / 4}\n                width={gridCellSize.width}\n                height={gridCellSize.height / 2}\n                image={hubImage}\n                shadowBlur={5}\n            />\n            <Image\n                x={parkingLot.x * gridCellSize.width}\n                y={parkingLot.y * gridCellSize.height}\n                width={gridCellSize.width}\n                height={gridCellSize.height}\n                image={carImage}\n                shadowBlur={5}\n                visible={occupied}\n            />\n        </>\n    );\n}\n\nexport default HubTile;\n","import React from \"react\";\nimport { Rect, Group, Text } from \"react-konva\";\n\nfunction DebugTile({ mapTile, hasStatus, spacesAvailable, gridCellSize, debugName }) {\n\n    // const color = 'rgba(220, 220, 220, 0.8)'\n    // const statusButton = {\n    //     position: 'absolute',\n    //     background: color,\n    //     top: mapTile.y * gridCellSize.height + gridCellSize.height * 1.1,\n    //     left: mapTile.x * gridCellSize.width + gridCellSize.width / 13,\n    //     width: gridCellSize.width * 0.95,\n    //     height: gridCellSize.height / 4\n    // }\n    // const typeButton = {\n    //     position: 'absolute',\n    //     background: color,\n    //     top: mapTile.y * gridCellSize.height + gridCellSize.height / 2,\n    //     left: mapTile.x * gridCellSize.width + gridCellSize.width / 13,\n    //     width: gridCellSize.width * 0.95,\n    //     height: gridCellSize.height / 4\n    // }\n\n    // TODO: replace portal with rect\n    // if (mapTile.type === \"hub\")\n    //     portalButtonGroup = <Portal>\n    //         <Button\n    //             variant=\"light\"\n    //             style={typeButton}\n    //         >\n    //             {debugName}\n    //         </Button>\n    //         <Button\n    //             variant=\"light\"\n    //             style={statusButton}\n    //         >\n    //             Available\n    //         </Button>\n    //     </Portal>;\n    // else if (mapTile.type === \"parking\")\n    //     portalButtonGroup = <Portal>\n    //         <Button\n    //             variant=\"light\"\n    //             style={typeButton}\n    //         >\n    //             {debugName}\n    //         </Button>\n    //         <Button\n    //             variant=\"light\"\n    //             style={statusButton}\n    //         >\n    //             Available parking\n    //         </Button>\n    //     </Portal>;\n    // else\n    //     portalButtonGroup = <Portal>\n    //         <Button\n    //             variant=\"light\"\n    //             style={typeButton}\n    //         >\n    //             {debugName}\n    //         </Button>\n    //     </Portal>;\n\n    return (\n        <Group>\n            <Rect\n                x={mapTile.x * gridCellSize.width}\n                y={mapTile.y * gridCellSize.height}\n                width={gridCellSize.width}\n                height={gridCellSize.height}\n                fill={\"rgba(255, 255, 255, 0.3)\"}\n                shadowBlur={5}\n                stroke={\"black\"}\n                strokeWidth={3}\n            />\n            {/* {portalButtonGroup} */}\n            <Text\n                x={mapTile.x * gridCellSize.width + gridCellSize.width / 15}\n                y={mapTile.y * gridCellSize.height + gridCellSize.height / 12}\n                text={\"R\" + mapTile.y + \"C\" + mapTile.x + \" (\" + debugName + \")\"}\n                fontSize={20}\n            />\n            <Text\n                x={mapTile.x * gridCellSize.width + gridCellSize.width / 15}\n                y={mapTile.y * gridCellSize.height + gridCellSize.height / 1.25}\n                text={hasStatus ?\n                    \"Status: \" +\n                    (mapTile.type === \"hub\" ?\n                        (spacesAvailable.includes(\"R\" + mapTile.y + \"C\" + mapTile.x) ?\n                            \"Available\" : \"Awaiting Parking\") :\n                        (mapTile.type === \"parking\" ?\n                            (spacesAvailable.includes(\"R\" + mapTile.y + \"C\" + mapTile.x) ?\n                                \"Available\" : \"Occupied\") :\n                            null)) :\n                    null\n                }\n                fontSize={20}\n            />\n        </Group>\n    );\n}\n\nexport default DebugTile;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Group } from \"react-konva\";\nimport parkingLotLayout from \"../../../assets/initial-map.json\";\nimport useImage from 'use-image';\nimport ParkingLotTile from \"./ParkingLotTile.js\";\nimport HubTile from \"./HubTile.js\";\nimport DebugTile from \"./DebugTile.js\";\nconst parkingURL = require('../../../assets/images/parking-sign.svg');\nconst hubURL = require('../../../assets/images/hub.svg');\n\nfunction Map({ spacesAvailable, gridCellSize, offset, debugMode, carImage }) {\n    const [parkingImage] = useImage(parkingURL);\n    const [hubImage] = useImage(hubURL);\n\n    return (parkingLotLayout.map((mapTile, index) => {\n        let tile = null;\n        let debugName = null;\n        let hasStatus = false;\n\n        switch (mapTile.type) {\n            case \"parking\":\n                tile = <ParkingLotTile\n                    parkingLot={mapTile}\n                    spacesAvailable={spacesAvailable}\n                    gridCellSize={gridCellSize}\n                    parkingImage={parkingImage}\n                    carImage={carImage}\n                />\n                debugName = \"Parking space\";\n                hasStatus = true;\n                break;\n            case \"hub\":\n                tile = <HubTile\n                    parkingLot={mapTile}\n                    spacesAvailable={spacesAvailable}\n                    gridCellSize={gridCellSize}\n                    hubImage={hubImage}\n                    carImage={carImage}\n                />\n                debugName = \"Hub\";\n                hasStatus = true;\n                break;\n            case \"road\":\n                debugName = \"Road\";\n                break;\n            case \"blocked\":\n                debugName = \"Blocked space\";\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <Group\n                key={index}\n                x={offset.x}\n                y={offset.y}>\n                {tile}\n                {debugMode ?\n                    <DebugTile\n                        mapTile={mapTile}\n                        spacesAvailable={spacesAvailable}\n                        gridCellSize={gridCellSize}\n                        debugName={debugName}\n                        hasStatus={hasStatus}\n                    />\n                    :\n                    null\n                }\n            </Group >\n        );\n    }));\n}\n\nMap.propTypes = {\n    spacesAvailable: PropTypes.array.isRequired,\n    gridCellSize: PropTypes.object.isRequired,\n    debugMode: PropTypes.bool.isRequired,\n    offset: PropTypes.object.isRequired\n};\n\nexport default Map;\n","import React, { useState } from \"react\";\nimport { Image } from \"react-konva\";\nimport useImage from 'use-image';\nimport async from 'async';\nconst robotURL = require('../../assets/images/robot.svg');\n\nfunction Robot({ robotGridStaticLocation, gridCellSize, carImage, simulationOn, alreadyActivated, robotPath, setSpaceAvailable, setSpaceBusy, gridSize, parkingLotOffset, size, toggleSimulation, changeRobotGridStaticLocation }) {\n    const [isCarryingCar, setIsCarryingCar] = useState(false);\n    const [robotImage] = useImage(robotURL);\n    const robotImageRef = React.useRef();\n\n    const setScale = (x, y) => {\n        robotImageRef.current.to({\n            scaleX: x,\n            scaleY: y,\n            duration: 0.1\n        });\n    };\n\n    // TODO: STOP SIMULATION\n    if (simulationOn && !alreadyActivated) {\n        var count = 0;\n        async.whilst(\n            () => { return count < robotPath.length - 1; },\n            function (callback) {\n                count++;\n                if (robotPath[count - 1].pickupCar) {\n                    setIsCarryingCar(true);\n                    setSpaceAvailable(robotPath[count - 1].row, robotPath[count - 1].column);\n                }\n                else if (robotPath[count - 1].dropCar) {\n                    setIsCarryingCar(false);\n                    setSpaceBusy(robotPath[count - 1].row, robotPath[count - 1].column);\n                }\n                robotImageRef.current.to({\n                    x: fromGridToCanvas(robotPath[count]).x,\n                    y: fromGridToCanvas(robotPath[count]).y,\n                    duration: 1\n                });\n                setTimeout(callback, 1050);\n            },\n            function (_err) { // finally\n                if (robotPath[count].pickupCar) {\n                    setIsCarryingCar(true);\n                    setSpaceAvailable(robotPath[count].row, robotPath[count].column);\n                }\n                else if (robotPath[count].dropCar) {\n                    setIsCarryingCar(false);\n                    setSpaceBusy(robotPath[count].row, robotPath[count].column);\n                }\n                toggleSimulation(false);\n            }\n        );\n    }\n\n    const propToGrid = (robotCanvasLocation) => {\n        const cellColumn = Math.floor((robotCanvasLocation.x + gridCellSize.width / 2) / size.width * gridSize.columns);\n        const cellRow = Math.floor((robotCanvasLocation.y + gridCellSize.height / 2) / size.height * gridSize.rows);\n\n        if ((cellColumn >= 0 && cellColumn < gridSize.columns) && (cellRow >= 0 && cellRow < gridSize.rows)) {\n            changeRobotGridStaticLocation(cellColumn, cellRow);\n            var canvasLocation = fromGridToCanvas({ column: cellColumn, row: cellRow });\n            robotImageRef.current.to({\n                x: canvasLocation.x,\n                y: canvasLocation.y,\n                duration: 0.1\n            });\n        }\n        else {\n            robotImageRef.current.to({\n                x: fromGridToCanvas(robotGridStaticLocation).x,\n                y: fromGridToCanvas(robotGridStaticLocation).y,\n                duration: 0.1\n            });\n        }\n    };\n\n    function fromGridToCanvas(position) {\n        return {\n            x: parkingLotOffset.x + position.column * gridCellSize.width,\n            y: parkingLotOffset.y + position.row * gridCellSize.height - gridCellSize.height / 50\n        };\n    }\n\n    return (\n        <Image\n            ref={robotImageRef}\n            x={fromGridToCanvas(robotGridStaticLocation).x}\n            y={fromGridToCanvas(robotGridStaticLocation).y}\n            width={gridCellSize.width}\n            height={gridCellSize.height}\n            image={isCarryingCar ? carImage : robotImage}\n            shadowBlur={0.5}\n            draggable={!simulationOn}\n            onDragStart={() => { setScale(1.2, 1.2) }}\n            onDragEnd={() => {\n                setScale(1, 1);\n                propToGrid(robotImageRef.current._lastPos);\n            }}\n        />\n    );\n}\n\nexport default Robot;\n","import React, { useState, useEffect } from \"react\";\nimport RobotPath from './RobotPath';\nimport { Stage, Layer, Shape } from \"react-konva\";\nimport useImage from 'use-image';\nimport Map from './Map/Map';\nimport Robot from \"./Robot\";\nconst carURL = require('../../assets/images/racecar.svg');\n\nfunction Canvas({\n    spacesAvailable,\n    debugMode,\n    robotPath,\n    toggleSimulation,\n    robotGridStaticLocation,\n    gridSize,\n    simulationOn,\n    changeRobotGridStaticLocation,\n    setSpaceAvailable,\n    setSpaceBusy,\n    alreadyActivated,\n    resizable\n}) {\n    const [carImage] = useImage(carURL);\n    const parkingLotOffset = { x: 0, y: 0 };\n    const [stageHeight, setStageHeight] = useState(850);\n    // this is 96cm\n    const squareSideHeightRatio = 96 / 288;\n    const upperLeftSquareSide = stageHeight * squareSideHeightRatio;\n    // height is 288cm, width is 401.4cm\n    const widthHeightRatio = 401.4 / 288;\n    const size = { height: stageHeight, width: stageHeight * widthHeightRatio };\n    const gridCellSize = {\n        height: size.height / gridSize.rows,\n        width: size.width / gridSize.columns\n    }\n\n    function checkSize() {\n        setStageHeight(window.innerHeight * 0.9);\n    }\n\n    useEffect(() => {\n        if (resizable) {\n            checkSize();\n            window.addEventListener(\"resize\", checkSize);\n        }\n    }, [resizable]);\n\n\n    return (\n        <Stage\n            width={parkingLotOffset.x + size.width + 5}\n            height={size.height}\n        // style={{\n        //     textAlign: \"center\",\n        //     border: \"3px solid black\",\n        //     background: \"radial-gradient(ellipse at top, #e66465, transparent), radial-gradient(ellipse at bottom, #4d9f0c, transparent)\"\n        // }}\n        >\n            <Layer>\n                <Shape // Parking Lot\n                    x={parkingLotOffset.x}\n                    y={parkingLotOffset.y}\n                    sceneFunc={(context, shape) => {\n                        context.beginPath();\n                        context.moveTo(upperLeftSquareSide, 0);\n                        context.lineTo(upperLeftSquareSide, upperLeftSquareSide);\n                        context.lineTo(0, upperLeftSquareSide);\n                        context.lineTo(0, size.height);\n                        context.lineTo(size.width, size.height);\n                        context.lineTo(size.width, 0);\n                        context.closePath();\n                        // (!) Konva specific method, it is very important\n                        context.fillStrokeShape(shape);\n                    }}\n                    fillRadialGradientStartPoint={{ x: size.width / 2, y: size.height / 2 }}\n                    fillRadialGradientEndPoint={{ x: size.width / 2, y: size.height / 2 }}\n                    fillRadialGradientStartRadius={size.width > size.height ? size.height : size.width}\n                    fillRadialGradientColorStops={[\n                        0, \"rgb(190, 190, 190)\",\n                        1, \"rgb(255, 255, 255)\"\n                    ]}\n                    stroke={\"black\"}\n                    strokeWidth={5}\n                />\n                <Map\n                    carImage={carImage}\n                    spacesAvailable={spacesAvailable}\n                    debugMode={debugMode}\n                    gridCellSize={gridCellSize}\n                    offset={parkingLotOffset}\n                />\n                <RobotPath\n                    gridCellSize={gridCellSize}\n                    robotPath={robotPath}\n                    parkingLotOffset={parkingLotOffset}\n                />\n                <Robot\n                    robotGridStaticLocation={robotGridStaticLocation}\n                    gridCellSize={gridCellSize}\n                    carImage={carImage}\n                    simulationOn={simulationOn}\n                    alreadyActivated={alreadyActivated}\n                    robotPath={robotPath}\n                    setSpaceAvailable={setSpaceAvailable}\n                    setSpaceBusy={setSpaceBusy}\n                    gridSize={gridSize}\n                    parkingLotOffset={parkingLotOffset}\n                    size={size}\n                    toggleSimulation={toggleSimulation}\n                    changeRobotGridStaticLocation={changeRobotGridStaticLocation}\n                />\n            </Layer>\n        </Stage>\n    );\n}\n\nexport default Canvas;\n","import React from \"react\";\n\n\nclass Overhead extends React.Component {\n    constructor() {\n        super();\n        this.state = { time: new Date().toLocaleString() };\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.setState({ time: new Date().toLocaleString() }), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <div\n                className=\"pt-3\"\n                style={{\n                    height: \"94vh\", // relative to the height of the viewport\n                    backgroundColor: \"#282c34\",\n                    textAlign: \"center\",\n                    color: \"white\"\n                }}\n            >\n                <header className=\"App-header\">\n                    <h3 className=\"mb-3\"> {this.state.time} UTC </h3>\n                </header>\n                <video\n                    controls\n                    autoPlay\n                    width={window.innerWidth * 0.9}\n                    height={window.innerHeight * 0.8}\n                >\n                    <source\n                        src=\"http://129.215.124.4:8081/stream.ogg\"\n                        type=\"video/ogg\"\n                    />\n                    Sorry, your browser doesn't support embedded videos.\n                </video>\n            </div>\n        );\n    }\n}\n\nexport default Overhead;\n","var domain = ';; Authors: Theodor Amariucai & Bora M. Alper (in no particular order)\\n\\n(define (domain finitech)\\n    (:requirements :adl :typing :negative-preconditions :strips)\\n\\n    (:types\\n        blockedTile - tile  ;; physically inaccessible \\n        roadTile - tile\\n        parkingTile - tile\\n        hubTile - tile\\n        \\n        car - dynamic  ;; cars can only be moved around with the help of the robot\\n        robot - dynamic\\n    )\\n\\n    (:predicates\\n        ;; TODO: enforce that one and only one is true at a given time\\n        (TemporarilyBlocked ?t - tile)\\n\\n        ;; The car is waiting to be parked\\n        (AwaitingParking ?c - car)\\n        ;; The car is waiting for delivery\\n        (AwaitingDelivery ?c - car)\\n        ;; Otherwise the car is waiting for its owner\\n\\n        ;; ?a IsToTheLeftOf/IsAbove ?b\\n        (IsToTheLeftOf ?a - tile ?b - tile)\\n        (IsAbove ?a - tile ?b - tile)\\n\\n        (IsAt ?m - dynamic ?t - tile)\\n\\n        (IsCarrying ?r - robot ?c - car)\\n    )\\n\\n    ;;;;;; WE ASSUME HORIZONTAL TILES!\\n\\n    ;;;; Action Template - Delete and fill in own actions ;;;;\\n    (:action go-left\\n        :parameters (?r - robot ?f - tile ?t - roadTile)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?t ?f)\\n            (not (TemporarilyBlocked ?t))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n        )\\n    )\\n\\n    (:action go-right\\n        :parameters (?r - robot ?f - tile ?t - roadTile)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?f ?t)\\n            (not (TemporarilyBlocked ?t))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n        )\\n    )\\n\\n    (:action go-up\\n        :parameters (?r - robot ?f - roadTile ?t - roadTile)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsAbove ?t ?f)\\n            (not (TemporarilyBlocked ?t))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n        )\\n    )\\n\\n    (:action go-down\\n        :parameters (?r - robot ?f - roadTile ?t - roadTile)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsAbove ?f ?t)\\n            (not (TemporarilyBlocked ?t))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n        )\\n    )\\n\\n    ;; 1) scan\\n    ;; 2) slide under\\n    ;; 3) lift\\n    ;; END\\n    (:action pickup-car-leftwards\\n        :parameters (?r - robot ?f - roadTile ?t - hubTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsAt ?c ?t)\\n            (IsToTheLeftOf ?t ?f)\\n            \\n            (not (exists (?c2 - car) (and (IsCarrying ?r ?c2))))\\n            (AwaitingParking ?c)\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (not (IsAt ?c ?t))\\n            (IsAt ?r ?t)\\n            \\n            (IsCarrying ?r ?c)\\n        )\\n    )\\n\\n    (:action dropoff-car-leftwards\\n        :parameters (?r - robot ?f - roadTile ?t - hubTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?t ?f)\\n            \\n            (IsCarrying ?r ?c)\\n            (not (exists (?c2 - car) (IsAt ?c2 ?t)))\\n            ;; Necessary? (AwaitingDelivery ?c)\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            (IsAt ?c ?t)\\n            \\n            (not (IsCarrying ?r ?c))\\n            (not (AwaitingDelivery ?c))\\n        )\\n    )\\n\\n    (:action park-car-rightwards\\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?f ?t)\\n            \\n            (not (exists (?c2 - car) (IsAt ?c2 ?t)))\\n            (IsCarrying ?r ?c)\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            \\n            (not (IsCarrying ?r ?c))\\n            (IsAt ?c ?t)\\n            (not (AwaitingParking ?c))\\n        )\\n    )\\n\\n    (:action park-car-leftwards\\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?t ?f)\\n            \\n            (not (exists (?c2 - car) (IsAt ?c2 ?t)))\\n            (IsCarrying ?r ?c)\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            \\n            (not (IsCarrying ?r ?c))\\n            (IsAt ?c ?t)\\n            (not (AwaitingParking ?c))\\n        )\\n    )\\n\\n    ;;;;\\n\\n    (:action retrieve-car-rightwards\\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?f ?t)\\n            \\n            (AwaitingDelivery ?c)\\n            (IsAt ?c ?t)\\n            \\n            (not (exists (?c2 - car) (and\\n                (IsCarrying ?r ?c2)\\n            )))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            \\n            (not (IsAt ?c ?t))\\n            (IsCarrying ?r ?c)\\n        )\\n    )\\n\\n    (:action retrieve-car-leftwards\\n        :parameters (?r - robot ?f - roadTile ?t - parkingTile ?c - car)\\n        :precondition (and\\n            (IsAt ?r ?f)\\n            (IsToTheLeftOf ?t ?f)\\n            \\n            (AwaitingDelivery ?c)\\n            (IsAt ?c ?t)\\n            \\n            (not (exists (?c2 - car) (and\\n                (IsCarrying ?r ?c2)\\n            )))\\n        )\\n        :effect (and\\n            (not (IsAt ?r ?f))\\n            (IsAt ?r ?t)\\n            \\n            (not (IsAt ?c ?t))\\n            (IsCarrying ?r ?c)\\n        )\\n    )\\n\\n)\\n\\n';\nexport default domain;","import domain from '../assets/planner/domain/domain.js';\nimport axios from 'axios';\n\nexport default async function plan(problem) {\n    const options = {\n        url: 'http://solver.planning.domains/solve-and-validate',\n        method: 'POST',\n        contentType: 'application/json',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json;charset=UTF-8'\n        },\n        data: JSON.stringify({\n            \"domain\": domain,\n            \"problem\": problem\n        })\n    };\n\n    return await axios(options)\n        .then(response => {\n            if (response['data']['status'] === 'ok') {\n                return response.data.result.plan;\n            } else {\n                return -1;\n            }\n        });\n}","export default function processCommands(steps, robotLocation) {\n    let newPathPoint = { pickupCar: false, dropCar: false, column: robotLocation.column, row: robotLocation.row };\n    let path = [newPathPoint];\n    steps.forEach(action => {\n        if (action.name.includes(\"go-up\")) {\n            newPathPoint = { column: newPathPoint.column, row: newPathPoint.row - 1 };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"go-down\")) {\n            newPathPoint = { column: newPathPoint.column, row: newPathPoint.row + 1 };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"go-right\")) {\n            newPathPoint = { column: newPathPoint.column + 1, row: newPathPoint.row };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"park-car-rightwards\")) {\n            newPathPoint = { dropCar: true, column: newPathPoint.column + 1, row: newPathPoint.row };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"retrieve-car-rightwards\")) {\n            newPathPoint = { pickupCar: true, column: newPathPoint.column + 1, row: newPathPoint.row };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"dropoff-car-leftwards\") ||\n            action.name.includes(\"park-car-leftwards\")) {\n            newPathPoint = { dropCar: true, column: newPathPoint.column - 1, row: newPathPoint.row };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"pickup-car-leftwards\") ||\n            action.name.includes(\"retrieve-car-leftwards\")) {\n            newPathPoint = { pickupCar: true, column: newPathPoint.column - 1, row: newPathPoint.row };\n            path.push(newPathPoint)\n        } else if (action.name.includes(\"go-left\")) {\n            newPathPoint = { column: newPathPoint.column - 1, row: newPathPoint.row };\n            path.push(newPathPoint)\n        }\n    })\n    return path;\n};","import Mustache from 'mustache';\n\nfunction generateProblem(robot, cars, tiles, scenario, setup) {\n    var plugins = {\n        robot: \"Robot - robot\",\n        cars: `\n        Car1 - car\\n       \n        Car2 - car\\n        \n        Car3 - car\\n        \n        Car4 - car\\n\n        `,\n        tiles: `\n        R0C0 - blockedTile\\n        \n        R0C1 - parkingTile\\n        \n        R0C2 - roadTile\\n        \n        R0C3 - parkingTile\\n        \n        R1C0 - blockedTile\\n        \n        R1C1 - parkingTile\\n        \n        R1C2 - roadTile\\n\n        R1C3 - parkingTile\\n\n        R2C0 - hubTile\\n\n        R2C1 - roadTile\\n\n        R2C2 - roadTile\\n \n        R2C3 - parkingTile\\n\n        R3C0 - hubTile\\n \n        R3C1 - roadTile\\n \n        R3C2 - roadTile\\n        \n        R3C3 - parkingTile\\n        \n        R4C0 - hubTile\\n        \n        R4C1 - roadTile\\n        \n        R4C2 - roadTile\\n        \n        R4C3 - parkingTile\\n    \n        `,\n        scenario: `\n        (IsAt Robot R4C1)\\n        \n        (IsAt Car1 R2C3)\\n        \n        (IsAt Car2 R3C3)\\n        \n        (IsAt Car3 R4C3)\\n        \n        (IsAt Car4 R4C0)\\n        \n        (AwaitingDelivery Car1)\\n        \n        (AwaitingParking Car4)\\n  \n        `,\n        setup: `\n        (IsToTheLeftOf R0C0 R0C1)\\n        \n        (IsToTheLeftOf R0C1 R0C2)\\n        \n        (IsToTheLeftOf R0C2 R0C3)\\n        \n        (IsToTheLeftOf R1C0 R1C1)\\n        \n        (IsToTheLeftOf R1C1 R1C2)\\n        \n        (IsToTheLeftOf R1C2 R1C3)\\n        \n        (IsToTheLeftOf R2C0 R2C1)\\n        \n        (IsToTheLeftOf R2C1 R2C2)\\n        \n        (IsToTheLeftOf R2C2 R2C3)\\n        \n        (IsToTheLeftOf R3C0 R3C1)\\n        \n        (IsToTheLeftOf R3C1 R3C2)\\n        \n        (IsToTheLeftOf R3C2 R3C3)\\n        \n        (IsToTheLeftOf R4C0 R4C1)\\n        \n        (IsToTheLeftOf R4C1 R4C2)\\n        \n        (IsToTheLeftOf R4C2 R4C3)\\n\n        \\n        \n        (IsAbove R0C0 R1C0)\\n        \n        (IsAbove R0C1 R1C1)\\n        \n        (IsAbove R0C2 R1C2)\\n        \n        (IsAbove R0C3 R1C3)\\n        \n        (IsAbove R1C0 R2C0)\\n        \n        (IsAbove R1C1 R2C1)\\n        \n        (IsAbove R1C2 R2C2)\\n        \n        (IsAbove R1C3 R2C3)\\n        \n        (IsAbove R2C0 R3C0)\\n        \n        (IsAbove R2C1 R3C1)\\n        \n        (IsAbove R2C2 R3C2)\\n        \n        (IsAbove R2C3 R3C3)\\n        \n        (IsAbove R3C0 R4C0)\\n        \n        (IsAbove R3C1 R4C1)\\n        \n        (IsAbove R3C2 R4C2)\\n        \n        (IsAbove R3C3 R4C3)\\n    \n        `\n    };\n\n    return Mustache.render(`\n    ;; Authors: Theodor Amariucai & Bora M. Alper (in no particular order)\n    \\n\\n\n    (define (problem parking)\\n    \n    (:domain finitech)\\n    \n    \\n    \n    (:objects\\n        \n        {{robot}}\n        \\n       \n        {{cars}}       \n        \\n        \n        {{tiles}}\n    )\n    \\n\\n    \n    (:init\\n        \n        {{scenario}}\n        \\n        \n        {{setup}}\n    )\n    \\n\\n    \n    (:goal (and\\n        \n        (not (exists (?c - car) (or\\n            \n            (AwaitingParking ?c)\\n            \n            (AwaitingDelivery ?c)\\n        \n        )))\\n    \n    ))\\n)\\n\\n\n    `, plugins);\n}\n\nexport default generateProblem;","import React from 'react';\nimport Canvas from './canvas/Canvas';\nimport Overhead from './cameras/Overhead';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Navbar, Nav, NavDropdown, Container, Row, Col } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Toast } from \"react-bootstrap\";\nimport { GoGear } from 'react-icons/go';\nimport plan from '../actions/plan';\nimport processCommands from '../actions/processCommands';\nimport generateProblem from '../actions/generateProblem.js';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      spacesAvailable: [\"R0C1\", \"R1C1\", \"R0C3\", \"R1C3\", \"R2C0\", \"R3C0\"],\n      robotGridStaticLocation: { column: 1, row: 4 },\n      robotCommands: [],\n      debugMode: false,\n      gridSize: { rows: 5, columns: 4 },\n      simulationOn: false,\n      alreadyActivated: false,\n      toasts: [],\n      resizableCanvas: false,\n    };\n    this.initialSpacesAvailable = this.state.spacesAvailable;\n    this.toggleSimulation = this.toggleSimulation.bind(this);\n    this.setSpaceAvailable = this.setSpaceAvailable.bind(this);\n    this.setSpaceBusy = this.setSpaceBusy.bind(this);\n    this.changeRobotGridStaticLocation = this.changeRobotGridStaticLocation.bind(this);\n  }\n\n  setSpaceAvailable(row, column) {\n    const thisSpace = \"R\" + row + \"C\" + column;\n    let toModifySpacesAvailable = [...this.state.spacesAvailable];\n    if (toModifySpacesAvailable.includes(thisSpace))\n      return;\n    else\n      toModifySpacesAvailable.push(thisSpace);\n    this.setState({\n      spacesAvailable: toModifySpacesAvailable\n    });\n  }\n\n  setSpaceBusy(row, column) {\n    const thisSpace = \"R\" + row + \"C\" + column;\n    let toModifySpacesAvailable = [...this.state.spacesAvailable];\n    if (!toModifySpacesAvailable.includes(thisSpace))\n      return;\n    else\n      toModifySpacesAvailable.splice(toModifySpacesAvailable.indexOf(thisSpace), 1);\n    this.setState({\n      spacesAvailable: toModifySpacesAvailable\n    });\n  }\n\n  changeRobotGridStaticLocation(newColumn, newRow) {\n    this.setState({\n      robotGridStaticLocation: { column: newColumn, row: newRow }\n    });\n  }\n\n  sendToastNotification = (message) => {\n    const toastTemplate = (\n      <Toast\n        key={this.state.toasts.length + 1}\n        onClose={() => this.closeOldestNotification()}\n        show={true}\n        delay={3000}\n        autohide\n      >\n        <Toast.Header>\n          <GoGear />\n          <strong className=\"mr-auto ml-2\">Replanning...</strong>\n          just now\n        </Toast.Header>\n        <Toast.Body>\n          <h6 style={{ color: \"rgb(70, 70, 70)\" }}>{message}</h6>\n        </Toast.Body>\n      </Toast>\n    );\n\n    var newToasts = this.state.toasts;\n    newToasts.push(toastTemplate)\n    this.setState({\n      toasts: newToasts\n    });\n  }\n\n  closeOldestNotification() {\n    var newToasts = this.state.toasts;\n    newToasts.shift();\n    this.setState({\n      toasts: newToasts\n    });\n  }\n\n  async toggleSimulation(forced) {\n    if (this.state.simulationOn) {\n      if (forced) {\n        // not working\n        this.setState({ robotPath: [], simulationOn: false });\n      }\n      else\n        this.setState({ simulationOn: false, alreadyActivated: false });\n    } else {\n      let commands = await plan(generateProblem(null, null, null, null, null));\n      if (commands !== -1) {\n        this.setState({\n          spacesAvailable: this.initialSpacesAvailable,\n          robotCommands: processCommands(commands, this.state.robotGridStaticLocation),\n          simulationOn: true,\n          alreadyActivated: false\n        }, () => { this.setState({ alreadyActivated: true }) });\n      } else {\n        console.log(\"Online planner at `http://solver.planning.domains/solve-and-validate` failed.\");\n      }\n    }\n  }\n\n  toggleDebugMode() {\n    this.setState({\n      debugMode: !this.state.debugMode\n    });\n  }\n\n  componentDidMount() {\n    this.sendToastNotification(\"A new car has arrived at hub R4C0!\");\n    this.sendToastNotification(\"A car is now awaiting delivery at hub R2C3!\");\n    this.sendToastNotification(\"A new car has arrived at hub R4C0!\");\n    this.sendToastNotification(\"A new obstacle was detected!\");\n    this.sendToastNotification(\"A new obstacle was detected!\");\n  }\n\n  render() {\n    return (\n      <Router>\n        <Navbar\n          variant=\"dark\"\n          sticky=\"top\"\n          style={{\n            width: \"1920px\"\n          }}\n        >\n          <Navbar.Brand>Finitech Operations Monitor</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <NavDropdown title=\"Parking Lot\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#/\">View</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item\n                onClick={() => { this.toggleDebugMode() }}\n              >Debug Mode\n              </NavDropdown.Item>\n              <NavDropdown.Item\n                onClick={() => { this.toggleSimulation(true) }}\n              >Toggle Simulation\n              </NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown title=\"Cameras\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#/overhead\">CCTV</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar>\n\n        <Switch>\n          <Route path=\"/overhead\">\n            <Overhead />\n          </Route>\n          <Route path=\"/\">\n            <div\n              style={{\n                height: \"877px\",\n                width: \"1920px\",\n                backgroundColor: \"#282c34\"\n              }}\n              className=\"pt-3\"\n            >\n              <Container fluid>\n                <Row>\n                  <Col xs={8}>\n                    <Canvas\n                      resizable={this.state.resizableCanvas}\n                      alreadyActivated={this.state.alreadyActivated}\n                      setSpaceAvailable={this.setSpaceAvailable}\n                      setSpaceBusy={this.setSpaceBusy}\n                      toggleSimulation={this.toggleSimulation}\n                      changeRobotGridStaticLocation={this.changeRobotGridStaticLocation}\n                      simulationOn={this.state.simulationOn}\n                      gridSize={this.state.gridSize}\n                      robotGridStaticLocation={this.state.robotGridStaticLocation}\n                      robotPath={this.state.robotCommands}\n                      debugMode={this.state.debugMode}\n                      spacesAvailable={this.state.spacesAvailable}\n                    />\n                  </Col>\n                  <Col xs={4}>\n                    <div\n                      aria-live=\"polite\"\n                      aria-atomic=\"true\"\n                      style={{\n                        position: 'absolute',\n                        bottom: 0,\n                        right: 20\n                      }}\n                    >\n                      {this.state.toasts}\n                    </div>\n                  </Col>\n                </Row>\n              </Container>\n            </div>\n          </Route>\n        </Switch>\n      </Router >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}