{"version":3,"sources":["components/ParkingSpace.js","components/ParkingGroup.js","components/PddlGrid.js","components/DateTime.js","components/ParkingLot.js","components/Cameras.js","components/App.js","serviceWorker.js","index.js"],"names":["ParkingSpace","props","x","y","width","height","fillRadialGradientStartPoint","fillRadialGradientEndPoint","fillRadialGradientStartRadius","fillRadialGradientColorStops","available","shadowBlur","stroke","strokeWidth","text","id","fontSize","ParkingGroup","horizontal","groupSpaceIndex","slice","spaces","map","spaceIsAvailable","index","key","offset","columns","Math","floor","PddlGrid","enabled","i","j","pddlGridCellSize","rows","parkingLotSize","pddlCells","push","parkingLotOffset","DateTime","state","time","Date","toLocaleString","this","interval","setInterval","setState","clearInterval","React","Component","ParkingLot","size","useState","debugModeActivated","setDebugModeActivated","className","ButtonToolbar","Button","variant","onClick","sceneFunc","context","shape","beginPath","moveTo","lineTo","closePath","fillStrokeShape","fill","spacesAvailable","App","Array","spaceIndex","toModifySpacesAvailable","toggleSpaceAvailable","Navbar","bg","Brand","Nav","Link","href","path","Cameras","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b00de489.chunk.js","sourcesContent":["import React from \"react\";\nimport { Rect, Text, Group } from \"react-konva\";\n\nfunction ParkingSpace(props) {\n    return (\n        <Group>\n            <Rect\n                x={props.x}\n                y={props.y}\n                width={props.width}\n                height={props.height}\n                fillRadialGradientStartPoint={{ x: props.width / 2, y: props.height / 2 }}\n                fillRadialGradientEndPoint={{ x: props.width / 2, y: props.height / 2 }}\n                fillRadialGradientStartRadius={props.width > props.height ? props.height : props.width}\n                fillRadialGradientColorStops={\n                    props.available ?\n                        [0, \"rgba(63,145,60)\", 1, \"rgba(103,233,98)\"] :\n                        [0, \"rgba(141,38,38)\", 1, \"rgba(230,67,67)\"]\n                }\n                shadowBlur={5}\n                stroke={\"black\"}\n                strokeWidth={3}\n            />\n            <Text\n                x={props.x + props.width / 2 - 5}\n                y={props.y + props.height / 2 - 10}\n                text={props.id}\n                fontSize={20}\n            />\n        </Group>\n    );\n}\n\nexport default ParkingSpace;\n","import React from \"react\";\nimport ParkingSpace from './ParkingSpace';\n\nfunction ParkingGroup(props) {\n    var width = props.horizontal ? 150 : 80, height = props.horizontal ? 80 : 150;\n    var groupSpaceIndex = props.slice[0];\n\n    return (\n        <>\n            {props.spaces.slice(props.slice[0], props.slice[1]).map((spaceIsAvailable, index) => {\n                groupSpaceIndex++;\n                return <ParkingSpace\n                    key={groupSpaceIndex}\n                    id={groupSpaceIndex}\n                    available={spaceIsAvailable}\n                    x={props.offset.x + (width + 3) * (index % props.columns)}\n                    y={props.offset.y + (height + 3) * Math.floor(index / props.columns)}\n                    width={width}\n                    height={height}\n                />\n            }\n            )}\n        </>\n    );\n}\n\nexport default ParkingGroup;\n","import React from \"react\";\nimport { Rect } from \"react-konva\";\n\nfunction PddlGrid(props) {\n    if (!props.enabled)\n        return (<></>);\n\n    const pddlGridCellSize = { height: 150, width: 150 }\n    const rows = Math.floor(props.parkingLotSize.width / pddlGridCellSize.width) + 1;\n    const columns = Math.floor(props.parkingLotSize.height / pddlGridCellSize.height) + 1;\n\n    let pddlCells = [], i, j;\n    for (i = 0; i < rows; i++)\n        for (j = 0; j < columns; j++) {\n            pddlCells.push(\n                <Rect\n                    key={j + columns * i}\n                    x={props.parkingLotOffset.x + i * pddlGridCellSize.width}\n                    y={props.parkingLotOffset.y + j * pddlGridCellSize.height}\n                    width={pddlGridCellSize.width}\n                    height={pddlGridCellSize.height}\n                    fillRadialGradientStartPoint={{ x: pddlGridCellSize.width / 2, y: pddlGridCellSize.height / 2 }}\n                    fillRadialGradientEndPoint={{ x: pddlGridCellSize.width / 2, y: pddlGridCellSize.height / 2 }}\n                    fillRadialGradientStartRadius={\n                        pddlGridCellSize.width > pddlGridCellSize.height ?\n                            pddlGridCellSize.height :\n                            pddlGridCellSize.width\n                    }\n                    fillRadialGradientColorStops={\n                        true ?\n                            [0, \"rgba(239, 14, 241, 0.1)\", 1, \"rgba(242, 62, 244, 0.1)\"] :\n                            [0, \"rgba(141,38,38)\", 1, \"rgba(230,67,67)\"]\n                    }\n                    shadowBlur={3}\n                    stroke={\"black\"}\n                    strokeWidth={0.5}\n                />);\n        }\n\n    return (<>{pddlCells}</>);\n}\n\nexport default PddlGrid;\n","import React from \"react\";\n\nclass DateTime extends React.Component {\n    constructor() {\n      super();\n      this.state = { time: new Date().toLocaleString() };\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.setState({ time: new Date().toLocaleString() }), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <h3> {this.state.time} </h3>);\n    }\n}\n\nexport default DateTime;\n","import React, { useState } from \"react\";\nimport ParkingGroup from './ParkingGroup';\nimport PddlGrid from './PddlGrid';\nimport DateTime from './DateTime';\nimport { Button, ButtonToolbar } from \"react-bootstrap\";\nimport { Stage, Layer, Shape } from \"react-konva\";\n\nfunction ParkingLot(props) {\n    const upperLeftSquareSide = 275;\n    const size = { height: 720, width: 1300 + upperLeftSquareSide };\n    const offset = { x: 150, y: 10 };\n    const [debugModeActivated, setDebugModeActivated] = useState(false);\n\n    return (\n        <div className=\"App\" >\n            <header className=\"App-header\">\n                <ButtonToolbar className=\"mb-3\">\n                    <DateTime />\n                    <Button\n                        className=\"ml-3\"\n                        variant=\"warning\"\n                        onClick={() => { setDebugModeActivated(!debugModeActivated) }}\n                    >\n                        Debug Mode\n                    </Button>\n                </ButtonToolbar>\n                <Stage width={1900} height={800}>\n                    <Layer>\n                        <Shape\n                            x={offset.x}\n                            y={offset.y}\n                            sceneFunc={(context, shape) => {\n                                context.beginPath();\n                                context.moveTo(upperLeftSquareSide, 0);\n                                context.lineTo(upperLeftSquareSide, upperLeftSquareSide);\n                                context.lineTo(0, upperLeftSquareSide);\n                                context.lineTo(0, offset.y + size.height);\n                                context.lineTo(size.width, offset.y + size.height);\n                                context.lineTo(size.width, 0);\n                                context.closePath();\n                                // (!) Konva specific method, it is very important\n                                context.fillStrokeShape(shape);\n                            }}\n                            fill={\"white\"}\n                            stroke={\"black\"}\n                            strokeWidth={5}\n                        />\n                        <ParkingGroup\n                            columns={5}\n                            horizontal={true}\n                            offset={{ x: 475, y: 10 }}\n                            spaces={props.spacesAvailable}\n                            slice={[0, 10]}\n                        />\n                        <ParkingGroup\n                            columns={2}\n                            horizontal={false}\n                            offset={{ x: 200, y: 285 }}\n                            spaces={props.spacesAvailable}\n                            slice={[10, 17]}\n                        />\n                        <PddlGrid\n                            enabled={debugModeActivated}\n                            parkingLotSize={size}\n                            parkingLotOffset={offset}\n                        />\n                    </Layer>\n                </Stage>\n            </header>\n        </div>\n    );\n}\n\nexport default ParkingLot;\n","import React from \"react\";\n\nfunction ParkingLot() {\n    return (\n        <div className=\"App\" >\n            <header className=\"App-header\">\n                <h3> Live stream from all cameras to be placed here </h3>\n            </header>\n        </div>\n    );\n}\n\nexport default ParkingLot;\n","import React from 'react';\nimport ParkingLot from './ParkingLot';\nimport Cameras from './Cameras';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { spacesAvailable: new Array(16).fill(true) };\n  }\n\n  toggleSpaceAvailable(spaceIndex) {\n    let toModifySpacesAvailable = [...this.state.spacesAvailable];\n    toModifySpacesAvailable[spaceIndex] = !toModifySpacesAvailable[spaceIndex];\n    this.setState({\n      spacesAvailable: toModifySpacesAvailable\n    });\n  }\n\n  componentDidMount() {\n    this.toggleSpaceAvailable(4);\n  }\n\n  render() {\n    return (\n      <Router>\n        <Navbar bg=\"primary\" variant=\"dark\">\n          {/* <img\n            src={window.location.origin + \"/favicon.ico\"}\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n            alt=\"Finitech logo\"\n          /> */}\n          <Navbar.Brand>Finitech Operations Monitor</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#/\">Parking Lot</Nav.Link>\n            <Nav.Link href=\"#/cameras\">Cameras</Nav.Link>\n          </Nav>\n        </Navbar>\n\n        <Switch>\n          <Route path=\"/cameras\">\n            <Cameras />\n          </Route>\n          <Route path=\"/\">\n            <ParkingLot\n              spacesAvailable={this.state.spacesAvailable}\n            />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}