{"version":3,"sources":["components/parking/ParkingSpace.js","components/parking/ParkingGroup.js","components/pddl/PddlGrid.js","components/DateTime.js","components/parking/ParkingLot.js","components/pddl/PddlLegend.js","components/cameras/Overhead.js","components/cameras/Onboard.js","components/App.js","serviceWorker.js","index.js"],"names":["ParkingSpace","props","x","y","width","height","fillRadialGradientStartPoint","fillRadialGradientEndPoint","fillRadialGradientStartRadius","fillRadialGradientColorStops","available","shadowBlur","stroke","strokeWidth","text","id","fontSize","ParkingGroup","horizontal","groupSpaceIndex","slice","spaces","map","spaceIsAvailable","index","key","offset","columns","Math","floor","PddlGrid","i","j","pddlGridCellSize","parkingLotSize","gridDimentions","rows","pddlCells","Object","freeze","uniqueId","xCoord","parkingLotOffset","yCoord","cellType","upperLeftSquareSide","stringColors","red","black","orange","blue","green","push","fill","DateTime","state","time","Date","toLocaleString","this","interval","setInterval","setState","clearInterval","React","Component","ParkingLot","size","className","ButtonToolbar","sceneFunc","context","shape","beginPath","moveTo","lineTo","closePath","fillStrokeShape","spacesAvailable","debugMode","PddlLegend","popover","Popover","Title","as","Content","purple","OverlayTrigger","placement","delay","show","hide","overlay","NavDropdown","Item","Cctv","audio","videoConstraints","facingMode","Onboard","App","Array","spaceIndex","toModifySpacesAvailable","toggleSpaceAvailable","Navbar","bg","variant","sticky","Brand","Nav","title","href","Divider","onClick","toggleDebugMode","path","Overhead","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e90abd52.chunk.js","sourcesContent":["import React from \"react\";\nimport { Rect, Text, Group } from \"react-konva\";\n\nfunction ParkingSpace(props) {\n    return (\n        <Group>\n            <Rect\n                x={props.x}\n                y={props.y}\n                width={props.width}\n                height={props.height}\n                fillRadialGradientStartPoint={{ x: props.width / 2, y: props.height / 2 }}\n                fillRadialGradientEndPoint={{ x: props.width / 2, y: props.height / 2 }}\n                fillRadialGradientStartRadius={props.width > props.height ? props.height : props.width}\n                fillRadialGradientColorStops={\n                    props.available ?\n                        [0, \"rgba(63,145,60)\", 1, \"rgba(103,233,98)\"] :\n                        [0, \"rgba(141,38,38)\", 1, \"rgba(230,67,67)\"]\n                }\n                shadowBlur={5}\n                stroke={\"black\"}\n                strokeWidth={3}\n            />\n            <Text\n                x={props.x + props.width / 2 - 5}\n                y={props.y + props.height / 2 - 10}\n                text={props.id}\n                fontSize={20}\n            />\n        </Group>\n    );\n}\n\nexport default ParkingSpace;\n","import React from \"react\";\nimport ParkingSpace from './ParkingSpace';\n\nfunction ParkingGroup(props) {\n    var width = props.horizontal ? 150 : 80, height = props.horizontal ? 80 : 150;\n    var groupSpaceIndex = props.slice[0];\n\n    return (\n        <>\n            {props.spaces.slice(props.slice[0], props.slice[1]).map((spaceIsAvailable, index) => {\n                groupSpaceIndex++;\n                return <ParkingSpace\n                    key={groupSpaceIndex}\n                    id={groupSpaceIndex}\n                    available={spaceIsAvailable}\n                    x={props.offset.x + (width + 3) * (index % props.columns)}\n                    y={props.offset.y + (height + 3) * Math.floor(index / props.columns)}\n                    width={width}\n                    height={height}\n                />\n            }\n            )}\n        </>\n    );\n}\n\nexport default ParkingGroup;\n","import React from \"react\";\nimport { Rect } from \"react-konva\";\n\nfunction PddlGrid(props) {\n    const pddlGridCellSize = {\n        height: props.parkingLotSize.height / props.gridDimentions.rows,\n        width: props.parkingLotSize.width / props.gridDimentions.columns\n    }\n\n    const cellTypes = Object.freeze({\n        \"blocking-space\":1, \n        \"road\":2, \n        \"available-parking\":3, \n        \"available-dropoff\":3, \n        \"car-awaiting-pickup\":3, \n        \"car-awaiting-owner\":3, \n        \"robot-location\":3, \n    })\n\n    let pddlCells = [], i, j;\n    for (i = 0; i < props.gridDimentions.columns; i++)\n        for (j = 0; j < props.gridDimentions.rows; j++) {\n            let uniqueId = j + props.gridDimentions.rows * i;\n\n            let xCoord = props.parkingLotOffset.x + i * pddlGridCellSize.width;\n            let yCoord = props.parkingLotOffset.y + j * pddlGridCellSize.height;\n\n            let cellType;\n            if (xCoord < props.parkingLotOffset.x + props.upperLeftSquareSide &&\n                props.parkingLotOffset.y + yCoord < props.upperLeftSquareSide)\n                cellType = props.stringColors.red;\n\n            if (i === 5 && j === props.gridDimentions.rows - 2)\n                cellType = props.stringColors.black;\n\n            if (i === props.gridDimentions.columns - 4 && j === props.gridDimentions.rows - 1)\n                cellType = props.stringColors.orange;\n\n            if (i >= props.gridDimentions.columns - 3 && j === props.gridDimentions.rows - 1)\n                cellType = props.stringColors.blue;\n\n            if (i <= 2 && j >= 2)\n                cellType = props.stringColors.green;\n\n            pddlCells.push(\n                <Rect\n                    key={uniqueId}\n                    x={xCoord}\n                    y={yCoord}\n                    width={pddlGridCellSize.width}\n                    height={pddlGridCellSize.height}\n                    fill={cellType}\n                    shadowBlur={3}\n                    stroke={\"black\"}\n                    strokeWidth={0.5}\n                />);\n        }\n\n    return (<>{pddlCells}</>);\n}\n\nexport default PddlGrid;\n","import React from \"react\";\n\nclass DateTime extends React.Component {\n    constructor() {\n      super();\n      this.state = { time: new Date().toLocaleString() };\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.setState({ time: new Date().toLocaleString() }), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <h3> {this.state.time} </h3>);\n    }\n}\n\nexport default DateTime;\n","import React from \"react\";\nimport ParkingGroup from './ParkingGroup';\nimport PddlGrid from '../pddl/PddlGrid';\nimport DateTime from '../DateTime';\nimport { ButtonToolbar } from \"react-bootstrap\";\nimport { Stage, Layer, Shape } from \"react-konva\";\n\nfunction ParkingLot(props) {\n    const upperLeftSquareSide = 275;\n    const size = { height: 730, width: 1300 + upperLeftSquareSide };\n    const offset = { x: 150, y: 10 };\n\n    return (\n        <div className=\"App\" >\n            <header className=\"App-header\">\n                <ButtonToolbar>\n                    <DateTime />\n                </ButtonToolbar>\n                <Stage width={1900} height={750}>\n                    <Layer>\n                        <Shape\n                            x={offset.x}\n                            y={offset.y}\n                            sceneFunc={(context, shape) => {\n                                context.beginPath();\n                                context.moveTo(upperLeftSquareSide, 0);\n                                context.lineTo(upperLeftSquareSide, upperLeftSquareSide);\n                                context.lineTo(0, upperLeftSquareSide);\n                                context.lineTo(0, size.height);\n                                context.lineTo(size.width, size.height);\n                                context.lineTo(size.width, 0);\n                                context.closePath();\n                                // (!) Konva specific method, it is very important\n                                context.fillStrokeShape(shape);\n                            }}\n                            fill={\"white\"}\n                            stroke={\"black\"}\n                            strokeWidth={5}\n                        />\n                        <ParkingGroup\n                            columns={8}\n                            horizontal={true}\n                            offset={{ x: offset.x + upperLeftSquareSide, y: offset.y }}\n                            spaces={props.spacesAvailable}\n                            slice={[0, 16]}\n                        />\n                        <ParkingGroup\n                            columns={3}\n                            horizontal={false}\n                            offset={{ x: offset.x, y: offset.y + upperLeftSquareSide }}\n                            spaces={props.spacesAvailable}\n                            slice={[16, 25]}\n                        />\n                        {props.debugMode ?\n                            <PddlGrid\n                                stringColors={props.stringColors}\n                                upperLeftSquareSide={upperLeftSquareSide} // for pddl grid automatic generation\n                                gridDimentions={{ rows: 5, columns: 19 }}\n                                parkingLotSize={size}\n                                parkingLotOffset={offset}\n                            /> :\n                            null\n                        }\n                    </Layer>\n                </Stage>\n            </header>\n        </div>\n    );\n}\n\nexport default ParkingLot;\n","import React from \"react\";\nimport { Stage, Layer, Rect, Text, Group } from \"react-konva\";\nimport { Popover, OverlayTrigger, NavDropdown } from \"react-bootstrap\";\n\nfunction PddlLegend(props) {\n    const popover = <Popover id=\"popover-basic\">\n        <Popover.Title as=\"h3\">Legend</Popover.Title>\n        <Popover.Content>\n            <Stage width={240} height={280}>\n                <Layer>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={5}\n                            width={30}\n                            height={30}\n                            fill={props.stringColors.red}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={10}\n                            text={\"Blocking Space\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={45}\n                            width={30}\n                            height={30}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={50}\n                            text={\"Road\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={85}\n                            width={30}\n                            height={30}\n                            fill={props.stringColors.green}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={90}\n                            text={\"Available Parking\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={125}\n                            width={30}\n                            height={30}\n                            fill={props.stringColors.blue}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={130}\n                            text={\"Available Dropoff\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={165}\n                            width={30}\n                            height={30}\n                            fill={props.stringColors.orange}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={170}\n                            text={\"Car Awaiting Pickup\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={205}\n                            width={30}\n                            height={30}\n                            fill={props.stringColors.purple}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={210}\n                            text={\"Car Awaiting Owner\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={245}\n                            width={30}\n                            height={30}\n                            fill={props.stringColors.black}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={250}\n                            text={\"Robot Location\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                </Layer>\n            </Stage>\n        </Popover.Content>\n    </Popover>\n\n    return (\n        <OverlayTrigger\n            placement=\"right\"\n            delay={{ show: 150, hide: 150 }}\n            overlay={popover}\n        >\n            <NavDropdown.Item>Debug Legend</NavDropdown.Item>\n        </OverlayTrigger>\n    );\n}\n\nexport default PddlLegend;\n","import React from \"react\";\nimport Webcam from \"react-webcam\";\n\nfunction Cctv() {\n    return (\n        <div className=\"App\" >\n            <header className=\"App-header\">\n                <h3 className=\"mb-3\"> Overhead camera </h3>\n                <Webcam\n                    audio={false}\n                    \n                    videoConstraints={{\n                        width: 1280,\n                        height: 720,\n                        facingMode: \"user\" // { exact: \"environment\" } for facing-out camera\n                    }} />\n            </header>\n        </div>\n    );\n}\n\nexport default Cctv;\n","import React from \"react\";\n\nfunction Onboard() {\n    return (\n        <div className=\"App\" >\n            <header className=\"App-header\">\n                <h3> Live stream from onboard Raspberry Pi cameras to be placed here</h3>\n            </header>\n        </div>\n    );\n}\n\nexport default Onboard;\n","import React from 'react';\nimport ParkingLot from './parking/ParkingLot';\nimport PddlLegend from './pddl/PddlLegend';\nimport Overhead from './cameras/Overhead';\nimport Onboard from './cameras/Onboard';\nimport './App.css';\n// import writeProblem from '../actions/writeProblem';\n// import solveProblem from '../actions/solveProblem';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      spacesAvailable: new Array(25).fill(true),\n      debugMode: false\n    };\n  }\n\n  stringColors = {\n    green: \"rgba(103, 233, 98, 0.22)\",\n    red: \"rgba(228, 27, 65, 0.22)\",\n    blue: \"rgba(34, 81, 221, 0.22)\",\n    orange: \"rgba(236, 140, 19, 0.22)\",\n    black: \"rgba(50, 50, 50, 0.22)\",\n    purple: \"rgba(94, 0, 255, 0.22)\"\n  }\n\n  toggleSpaceAvailable(spaceIndex) {\n    let toModifySpacesAvailable = [...this.state.spacesAvailable];\n    toModifySpacesAvailable[spaceIndex] = !toModifySpacesAvailable[spaceIndex];\n    this.setState({\n      spacesAvailable: toModifySpacesAvailable\n    });\n  }\n\n  toggleDebugMode() {\n    this.setState({\n      debugMode: !this.state.debugMode\n    });\n  }\n\n  componentDidMount() {\n    this.toggleSpaceAvailable(4);\n    // solveProblem(writeProblem());\n  }\n\n  render() {\n    return (\n      <Router>\n        <Navbar bg=\"primary\" variant=\"dark\" sticky=\"top\" >\n          {/* <img\n            src={window.location.origin + \"/favicon.ico\"}\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n            alt=\"Finitech logo\"\n          /> */}\n          <Navbar.Brand>Finitech Operations Monitor</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <NavDropdown title=\"Parking Lot\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#/\">View</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item\n                onClick={() => { this.toggleDebugMode() }}\n              >Debug Mode</NavDropdown.Item>\n              <PddlLegend\n                stringColors={this.stringColors}\n              />\n            </NavDropdown>\n            <NavDropdown title=\"Cameras\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#/overhead\">Overhead</NavDropdown.Item>\n              <NavDropdown.Item href=\"#/onboard\">Onboard</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar>\n\n        <Switch>\n          <Route path=\"/overhead\">\n            <Overhead />\n          </Route>\n          <Route path=\"/onboard\">\n            <Onboard />\n          </Route>\n          <Route path=\"/\">\n            <ParkingLot\n              debugMode={this.state.debugMode}\n              stringColors={this.stringColors}\n              spacesAvailable={this.state.spacesAvailable}\n            />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}