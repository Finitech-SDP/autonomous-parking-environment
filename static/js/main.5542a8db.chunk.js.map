{"version":3,"sources":["assets/car.svg","components/RobotPath.js","components/DateTime.js","components/Map.js","components/Canvas.js","components/cameras/Overhead.js","components/cameras/Onboard.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","DebugPath","robotPath","parkingLotOffset","debugGridCellSize","pathStop","forEach","element","xCoord","x","i","width","yCoord","y","j","height","push","points","shadowBlur","stroke","strokeWidth","DateTime","state","time","Date","toLocaleString","this","interval","setInterval","setState","clearInterval","React","Component","carURL","require","Map","spacesAvailable","offset","debugMode","useImage","carImage","parkingLotLayout","map","parkingLot","index","lotRender","debugName","hasStatus","type","key","fillRadialGradientStartPoint","fillRadialGradientEndPoint","fillRadialGradientStartRadius","fillRadialGradientColorStops","includes","scale","image","fill","text","fontSize","Canvas","size","window","innerWidth","className","sceneFunc","context","shape","beginPath","moveTo","HEIGHT","lineTo","closePath","fillStrokeShape","RobotPath","Cctv","Onboard","App","spaceIndex","toModifySpacesAvailable","Navbar","bg","variant","sticky","Brand","Nav","NavDropdown","title","id","Item","href","Divider","onClick","toggleDebugMode","path","Overhead","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,iC,2JCqC5BC,MAjCf,YAAwE,IAAnDC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,iBAAkBC,EAAqB,EAArBA,kBAC1CC,EAAW,GAgBf,OAfAH,EAAUI,SAAQ,SAAAC,GACd,IAAIC,EACAL,EAAiBM,EACjBF,EAAQG,EAAIN,EAAkBO,MAC9BP,EAAkBO,MAAQ,EAE1BC,EACAT,EAAiBU,EACjBN,EAAQO,EAAIV,EAAkBW,OAC9BX,EAAkBW,OAAS,EAE/BV,EAASW,KAAKR,GACdH,EAASW,KAAKJ,MAGV,oCACJ,kBAAE,QAAF,CACIK,OAAQZ,EACRa,WAAY,EACZC,OAAQ,QACRC,YAAa,QCJVC,E,YAnBX,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CAAEC,MAAM,IAAIC,MAAOC,kBAFpB,E,iFAKO,IAAD,OAChBC,KAAKC,SAAWC,aAAY,kBAAM,EAAKC,SAAS,CAAEN,MAAM,IAAIC,MAAOC,qBAAqB,O,6CAIxFK,cAAcJ,KAAKC,Y,+BAInB,OACI,gCAAMD,KAAKJ,MAAMC,KAAjB,S,GAhBWQ,IAAMC,W,iCCGvBC,EAASC,EAAQ,KAwIRC,MAtIf,YAAyE,IAA1DC,EAAyD,EAAzDA,gBAAiBhC,EAAwC,EAAxCA,kBAAmBiC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UAAa,EACjDC,IAASN,GAArBO,EAD6D,oBAGpE,OAAQC,EAAiBC,KAAI,SAACC,EAAYC,GACtC,IAAIC,EAAY,KACZC,EAAY,KACZC,GAAY,EAEhB,OAAQJ,EAAWK,MACf,IAAK,UACDH,EAAY,kBAAC,QAAD,CACRI,IAAKL,GACL,kBAAC,OAAD,CACInC,EAAG4B,EAAO5B,EAAIkC,EAAWlC,EAAIL,EAAkBO,MAC/CE,EAAGwB,EAAOxB,EAAI8B,EAAW9B,EAAIT,EAAkBW,OAC/CJ,MAAOP,EAAkBO,MACzBI,OAAQX,EAAkBW,OAC1BmC,6BAA8B,CAAEzC,EAAGL,EAAkBO,MAAQ,EAAGE,EAAGT,EAAkBW,OAAS,GAC9FoC,2BAA4B,CAAE1C,EAAGL,EAAkBO,MAAQ,EAAGE,EAAGT,EAAkBW,OAAS,GAC5FqC,8BAA+BhD,EAAkBO,MAAQP,EAAkBW,OAASX,EAAkBW,OAASX,EAAkBO,MACjI0C,6BACIjB,EAAgBkB,SAAS,IAAMX,EAAW9B,EAAI,IAAM8B,EAAWlC,GAC3D,CAAC,EAAG,kBAAmB,EAAG,oBAC1B,CAAC,EAAG,kBAAmB,EAAG,mBAElCS,WAAY,EACZC,OAAQ,QACRC,YAAa,IAEfgB,EAAgBkB,SAAS,IAAMX,EAAW9B,EAAI,IAAM8B,EAAWlC,GAQ7D,KAPA,kBAAC,QAAD,CACIA,EAAG4B,EAAO5B,EAAIkC,EAAWlC,EAAIL,EAAkBO,MAC/CE,EAAGwB,EAAOxB,EAAI8B,EAAW9B,EAAIT,EAAkBW,OAAS,GACxDwC,MAAO,CAAE9C,EAAG,GAAKI,EAAG,IACpB2C,MAAOhB,EACPtB,WAAY,KAKxB4B,EAAY,gBACZC,GAAY,EACZ,MACJ,IAAK,MACDF,EAAY,oCACR,kBAAC,OAAD,CACIpC,EAAG4B,EAAO5B,EAAIkC,EAAWlC,EAAIL,EAAkBO,MAC/CE,EAAGwB,EAAOxB,EAAI8B,EAAW9B,EAAIT,EAAkBW,OAC/CJ,MAAOP,EAAkBO,MACzBI,OAAQX,EAAkBW,OAC1BmC,6BAA8B,CAAEzC,EAAGL,EAAkBO,MAAQ,EAAGE,EAAGT,EAAkBW,OAAS,GAC9FoC,2BAA4B,CAAE1C,EAAGL,EAAkBO,MAAQ,EAAGE,EAAGT,EAAkBW,OAAS,GAC5FqC,8BAA+BhD,EAAkBO,MAAQP,EAAkBW,OAASX,EAAkBW,OAASX,EAAkBO,MACjI0C,6BAA8B,CAAC,EAAG,mBAAoB,EAAG,qBACzDnC,WAAY,EACZC,OAAQ,QACRC,YAAa,IAEfgB,EAAgBkB,SAAS,IAAMX,EAAW9B,EAAI,IAAM8B,EAAWlC,GAQ7D,KAPA,kBAAC,QAAD,CACIA,EAAG4B,EAAO5B,EAAIkC,EAAWlC,EAAIL,EAAkBO,MAC/CE,EAAGwB,EAAOxB,EAAI8B,EAAW9B,EAAIT,EAAkBW,OAAS,GACxDwC,MAAO,CAAE9C,EAAG,GAAKI,EAAG,IACpB2C,MAAOhB,EACPtB,WAAY,KAKxB4B,EAAY,MACZC,GAAY,EACZ,MACJ,IAAK,OACDD,EAAY,OACZ,MACJ,IAAK,UACDA,EAAY,gBAMpB,OACI,kBAAC,QAAD,CAAOG,IAAKL,GACPC,EACAP,EACG,kBAAC,QAAD,KACI,kBAAC,OAAD,CACI7B,EAAG4B,EAAO5B,EAAIkC,EAAWlC,EAAIL,EAAkBO,MAC/CE,EAAGwB,EAAOxB,EAAI8B,EAAW9B,EAAIT,EAAkBW,OAC/CJ,MAAOP,EAAkBO,MACzBI,OAAQX,EAAkBW,OAC1B0C,KAAM,2BACNvC,WAAY,EACZC,OAAQ,QACRC,YAAa,IAEjB,kBAAC,OAAD,CACIX,EAAG4B,EAAO5B,EAAIkC,EAAWlC,EAAIL,EAAkBO,MAAQP,EAAkBO,MAAQ,GACjFE,EAAGwB,EAAOxB,EAAI8B,EAAW9B,EAAIT,EAAkBW,OAASX,EAAkBW,OAAS,EACnF2C,KAAM,IAAMf,EAAW9B,EAAI,IAAM8B,EAAWlC,EAAI,KAAOqC,EAAY,IACnEa,SAAU,KAEd,kBAAC,OAAD,CACIlD,EAAG4B,EAAO5B,EAAIkC,EAAWlC,EAAIL,EAAkBO,MAAQP,EAAkBO,MAAQ,GACjFE,EAAGwB,EAAOxB,EAAI8B,EAAW9B,EAAIT,EAAkBW,OAASX,EAAkBW,OAAS,EAAI,GACvF2C,KAAMX,EACF,YACqB,QAApBJ,EAAWK,KACPZ,EAAgBkB,SAAS,IAAMX,EAAW9B,EAAI,IAAM8B,EAAWlC,GAC5D,YAAc,mBACG,YAApBkC,EAAWK,KACPZ,EAAgBkB,SAAS,IAAMX,EAAW9B,EAAI,IAAM8B,EAAWlC,GAC5D,YAAc,WAClB,MACR,KAEJkD,SAAU,MAGlB,UC1DLC,MA9Df,YAA4D,IAA1CxB,EAAyC,EAAzCA,gBAAiBE,EAAwB,EAAxBA,UAAWpC,EAAa,EAAbA,UAOpC2D,EAAO,CAAE9C,OANA,IAMgBJ,MADN,MAAQ,IALlB,KAOT0B,EAAS,CAAE5B,GAAIqD,OAAOC,WAAa,IAAM,EAAIF,EAAKlD,MAAQ,EAAGE,EAAG,IAChET,EAAoB,CACtBW,OAAQ8C,EAAK9C,OAAS,EACtBJ,MAAOkD,EAAKlD,MAAQ,GAGxB,OACI,yBAAKqD,UAAU,OACP,kBAAC,EAAD,MACA,kBAAC,QAAD,CAAOrD,MAAO,KAAMI,OAAQ,KACxB,kBAAC,QAAD,KAEI,kBAAC,QAAD,CACIN,EAAG4B,EAAO5B,EACVI,EAAGwB,EAAOxB,EACVoD,UAAW,SAACC,EAASC,GACjBD,EAAQE,YACRF,EAAQG,OArBRC,IAqBoC,GACpCJ,EAAQK,OAtBRD,SAuBAJ,EAAQK,OAAO,EAvBfD,KAwBAJ,EAAQK,OAAO,EAAGV,EAAK9C,QACvBmD,EAAQK,OAAOV,EAAKlD,MAAOkD,EAAK9C,QAChCmD,EAAQK,OAAOV,EAAKlD,MAAO,GAC3BuD,EAAQM,YAERN,EAAQO,gBAAgBN,IAE5BV,KAAM,QACNtC,OAAQ,QACRC,YAAa,IAEjB,kBAAC,EAAD,CACIgB,gBAAiBA,EACjBE,UAAWA,EACXlC,kBAAmBA,EACnBiC,OAAQA,IAEZ,kBAACqC,EAAD,CACItE,kBAAmBA,EACnBF,UAAWA,EACXC,iBAAkBkC,QC3C/BsC,MAVf,WACI,OACI,yBAAKX,UAAU,OACX,4BAAQA,UAAU,cACd,wBAAIA,UAAU,QAAd,oBCMDY,MAVf,WACI,OACI,yBAAKZ,UAAU,OACX,4BAAQA,UAAU,cACd,mG,oDCuEDa,G,mBAnEb,aAAe,IAAD,8BACZ,+CACKvD,MAAQ,CACXc,gBAAiB,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAC1DlC,UAAW,CAAC,CAAEQ,EAAG,EAAGI,EAAG,GAAK,CAAEJ,EAAG,EAAGI,EAAG,GAAK,CAAEJ,EAAG,EAAGI,EAAG,GAAK,CAAEJ,EAAG,EAAGI,EAAG,GAAK,CAAEJ,EAAG,EAAGI,EAAG,GAAK,CAAEJ,EAAG,EAAGI,EAAG,GAAK,CAAEJ,EAAG,EAAGI,EAAG,IACvHwB,WAAW,GALD,E,kFASOwC,GACnB,IAAIC,EAAuB,YAAOrD,KAAKJ,MAAMc,iBAC7C2C,EAAwBD,IAAeC,EAAwBD,GAC/DpD,KAAKG,SAAS,CACZO,gBAAiB2C,M,wCAKnBrD,KAAKG,SAAS,CACZS,WAAYZ,KAAKJ,MAAMgB,c,4EAQjB,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAAC0C,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,OAAOC,OAAO,OACzC,kBAACH,EAAA,EAAOI,MAAR,oCACA,kBAACC,EAAA,EAAD,CAAKrB,UAAU,WACb,kBAACsB,EAAA,EAAD,CAAaC,MAAM,cAAcC,GAAG,2BAClC,kBAACF,EAAA,EAAYG,KAAb,CAAkBC,KAAK,MAAvB,QACA,kBAACJ,EAAA,EAAYK,QAAb,MACA,kBAACL,EAAA,EAAYG,KAAb,CACEG,QAAS,WAAQ,EAAKC,oBADxB,eAIF,kBAACP,EAAA,EAAD,CAAaC,MAAM,UAAUC,GAAG,2BAC9B,kBAACF,EAAA,EAAYG,KAAb,CAAkBC,KAAK,cAAvB,QACA,kBAACJ,EAAA,EAAYG,KAAb,CAAkBC,KAAK,aAAvB,cAKN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,KAAK,aACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,CACE5F,UAAWwB,KAAKJ,MAAMpB,UACtBoC,UAAWZ,KAAKJ,MAAMgB,UACtBF,gBAAiBV,KAAKJ,MAAMc,yB,GA3DxBL,IAAMC,YCGJgE,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5542a8db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/car.83d2582b.svg\";","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Arrow } from \"react-konva\";\n\nfunction DebugPath({ robotPath, parkingLotOffset, debugGridCellSize }) {\n    let pathStop = [];\n    robotPath.forEach(element => {\n        let xCoord =\n            parkingLotOffset.x +\n            element.i * debugGridCellSize.width +\n            debugGridCellSize.width / 2\n            ;\n        let yCoord =\n            parkingLotOffset.y +\n            element.j * debugGridCellSize.height +\n            debugGridCellSize.height / 2\n            ;\n        pathStop.push(xCoord);\n        pathStop.push(yCoord);\n    });\n\n    return (<>{\n        < Arrow\n            points={pathStop}\n            shadowBlur={3}\n            stroke={\"black\"}\n            strokeWidth={1.5}\n        />}</>\n    );\n}\n\nDebugPath.propTypes = {\n    robotPath: PropTypes.array.isRequired,\n    parkingLotOffset: PropTypes.object.isRequired,\n    debugGridCellSize: PropTypes.object.isRequired\n};\n\nexport default DebugPath;\n","import React from \"react\";\n\nclass DateTime extends React.Component {\n    constructor() {\n      super();\n      this.state = { time: new Date().toLocaleString() };\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.setState({ time: new Date().toLocaleString() }), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <h3> {this.state.time} </h3>);\n    }\n}\n\nexport default DateTime;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Rect, Text, Group, Image } from \"react-konva\";\nimport parkingLotLayout from \"../assets/planner-logic/map.json\";\nimport useImage from 'use-image';\nconst carURL = require('../assets/car.svg');\n\nfunction Map({ spacesAvailable, debugGridCellSize, offset, debugMode }) {\n    const [carImage] = useImage(carURL);\n\n    return (parkingLotLayout.map((parkingLot, index) => {\n        let lotRender = null;\n        let debugName = null;\n        let hasStatus = false;\n\n        switch (parkingLot.type) {\n            case \"parking\":\n                lotRender = <Group\n                    key={index}>\n                    <Rect\n                        x={offset.x + parkingLot.x * debugGridCellSize.width}\n                        y={offset.y + parkingLot.y * debugGridCellSize.height}\n                        width={debugGridCellSize.width}\n                        height={debugGridCellSize.height}\n                        fillRadialGradientStartPoint={{ x: debugGridCellSize.width / 2, y: debugGridCellSize.height / 2 }}\n                        fillRadialGradientEndPoint={{ x: debugGridCellSize.width / 2, y: debugGridCellSize.height / 2 }}\n                        fillRadialGradientStartRadius={debugGridCellSize.width > debugGridCellSize.height ? debugGridCellSize.height : debugGridCellSize.width}\n                        fillRadialGradientColorStops={\n                            spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x) ?\n                                [0, \"rgba(63,145,60)\", 1, \"rgba(103,233,98)\"] :\n                                [0, \"rgba(141,38,38)\", 1, \"rgba(230,67,67)\"]\n                        }\n                        shadowBlur={5}\n                        stroke={\"black\"}\n                        strokeWidth={3}\n                    />\n                    {!spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x) ?\n                        <Image\n                            x={offset.x + parkingLot.x * debugGridCellSize.width}\n                            y={offset.y + parkingLot.y * debugGridCellSize.height - 65}\n                            scale={{ x: 0.5, y: 0.5 }}\n                            image={carImage}\n                            shadowBlur={5}\n                        /> :\n                        null\n                    }\n                </Group>\n                debugName = \"Parking space\";\n                hasStatus = true;\n                break;\n            case \"hub\":\n                lotRender = <>\n                    <Rect\n                        x={offset.x + parkingLot.x * debugGridCellSize.width}\n                        y={offset.y + parkingLot.y * debugGridCellSize.height}\n                        width={debugGridCellSize.width}\n                        height={debugGridCellSize.height}\n                        fillRadialGradientStartPoint={{ x: debugGridCellSize.width / 2, y: debugGridCellSize.height / 2 }}\n                        fillRadialGradientEndPoint={{ x: debugGridCellSize.width / 2, y: debugGridCellSize.height / 2 }}\n                        fillRadialGradientStartRadius={debugGridCellSize.width > debugGridCellSize.height ? debugGridCellSize.height : debugGridCellSize.width}\n                        fillRadialGradientColorStops={[0, \"rgb(14, 82, 165)\", 1, \"rgb(19, 115, 236)\"]}\n                        shadowBlur={5}\n                        stroke={\"black\"}\n                        strokeWidth={3}\n                    />\n                    {!spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x) ?\n                        <Image\n                            x={offset.x + parkingLot.x * debugGridCellSize.width}\n                            y={offset.y + parkingLot.y * debugGridCellSize.height - 65}\n                            scale={{ x: 0.5, y: 0.5 }}\n                            image={carImage}\n                            shadowBlur={5}\n                        /> :\n                        null\n                    }\n                </>\n                debugName = \"Hub\";\n                hasStatus = true;\n                break;\n            case \"road\":\n                debugName = \"Road\";\n                break;\n            case \"blocked\":\n                debugName = \"Blocked space\";\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <Group key={index}>\n                {lotRender}\n                {debugMode ?\n                    <Group>\n                        <Rect\n                            x={offset.x + parkingLot.x * debugGridCellSize.width}\n                            y={offset.y + parkingLot.y * debugGridCellSize.height}\n                            width={debugGridCellSize.width}\n                            height={debugGridCellSize.height}\n                            fill={\"rgba(255, 255, 255, 0.2)\"}\n                            shadowBlur={5}\n                            stroke={\"black\"}\n                            strokeWidth={3}\n                        />\n                        <Text\n                            x={offset.x + parkingLot.x * debugGridCellSize.width + debugGridCellSize.width / 10}\n                            y={offset.y + parkingLot.y * debugGridCellSize.height + debugGridCellSize.height / 5}\n                            text={\"R\" + parkingLot.y + \"C\" + parkingLot.x + \" (\" + debugName + \")\"}\n                            fontSize={20}\n                        />\n                        <Text\n                            x={offset.x + parkingLot.x * debugGridCellSize.width + debugGridCellSize.width / 10}\n                            y={offset.y + parkingLot.y * debugGridCellSize.height + debugGridCellSize.height / 2 + 30}\n                            text={hasStatus ?\n                                \"Status: \" +\n                                (parkingLot.type === \"hub\" ?\n                                    (spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x) ?\n                                        \"Available\" : \"Awaiting Parking\") :\n                                    (parkingLot.type === \"parking\" ?\n                                        (spacesAvailable.includes(\"R\" + parkingLot.y + \"C\" + parkingLot.x) ?\n                                            \"Available\" : \"Occupied\") :\n                                        null)) :\n                                null\n                            }\n                            fontSize={20}\n                        />\n                    </Group> :\n                    null\n                }\n            </Group>\n        );\n    }));\n}\n\nMap.propTypes = {\n    spacesAvailable: PropTypes.array.isRequired,\n    debugGridCellSize: PropTypes.object.isRequired,\n    debugMode: PropTypes.bool.isRequired,\n    offset: PropTypes.object.isRequired\n};\n\nexport default Map;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport RobotPath from './RobotPath';\nimport DateTime from './DateTime';\nimport { Stage, Layer, Shape } from \"react-konva\";\nimport Map from './Map';\n\nfunction Canvas({ spacesAvailable, debugMode, robotPath }) {\n    const HEIGHT = 750;\n    // this is 96cm\n    const squareSideHeightRatio = 96 / 288;\n    const upperLeftSquareSide = HEIGHT * squareSideHeightRatio;\n    // height is 288cm, width is 401.4cm\n    const widthHeightRatio = 401.4 / 288;\n    const size = { height: HEIGHT, width: HEIGHT * widthHeightRatio };\n    const offset = { x: (window.innerWidth - 30) / 2 - size.width / 2, y: 30 };\n    const debugGridCellSize = {\n        height: size.height / 6,\n        width: size.width / 4\n    }\n\n    return (\n        <div className=\"App\">\n                <DateTime/>\n                <Stage width={1800} height={835}>\n                    <Layer>\n                        {/* Parking Lot Shape  */}\n                        <Shape\n                            x={offset.x}\n                            y={offset.y}\n                            sceneFunc={(context, shape) => {\n                                context.beginPath();\n                                context.moveTo(upperLeftSquareSide, 0);\n                                context.lineTo(upperLeftSquareSide, upperLeftSquareSide);\n                                context.lineTo(0, upperLeftSquareSide);\n                                context.lineTo(0, size.height);\n                                context.lineTo(size.width, size.height);\n                                context.lineTo(size.width, 0);\n                                context.closePath();\n                                // (!) Konva specific method, it is very important\n                                context.fillStrokeShape(shape);\n                            }}\n                            fill={\"white\"}\n                            stroke={\"black\"}\n                            strokeWidth={5}\n                        />\n                        <Map\n                            spacesAvailable={spacesAvailable}\n                            debugMode={debugMode}\n                            debugGridCellSize={debugGridCellSize}\n                            offset={offset}\n                        />\n                        <RobotPath\n                            debugGridCellSize={debugGridCellSize}\n                            robotPath={robotPath}\n                            parkingLotOffset={offset}\n                        />\n                    </Layer>\n                </Stage>\n        </div>\n    );\n}\n\nCanvas.propTypes = {\n    robotPath: PropTypes.array.isRequired,\n    spacesAvailable: PropTypes.array.isRequired,\n    debugMode: PropTypes.bool.isRequired\n};\n\nexport default Canvas;\n","import React from \"react\";\n\nfunction Cctv() {\n    return (\n        <div className=\"App\" >\n            <header className=\"App-header\">\n                <h3 className=\"mb-3\"> CCTV camera </h3>\n            </header>\n        </div>\n    );\n}\n\nexport default Cctv;\n","import React from \"react\";\n\nfunction Onboard() {\n    return (\n        <div className=\"App\" >\n            <header className=\"App-header\">\n                <h3> Live stream from onboard Raspberry Pi cameras to be placed here</h3>\n            </header>\n        </div>\n    );\n}\n\nexport default Onboard;\n","import React from 'react';\nimport Canvas from './Canvas';\nimport Overhead from './cameras/Overhead';\nimport Onboard from './cameras/Onboard';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      spacesAvailable: [\"R0C1\", \"R1C1\", \"R0C3\", \"R1C3\", \"R2C0\", \"R3C0\"],\n      robotPath: [{ i: 0, j: 5 }, { i: 2, j: 5 }, { i: 2, j: 4 }, { i: 2, j: 3 }, { i: 2, j: 2 }, { i: 2, j: 1 }, { i: 3, j: 1 }],\n      debugMode: false\n    };\n  }\n\n  toggleSpaceAvailable(spaceIndex) {\n    let toModifySpacesAvailable = [...this.state.spacesAvailable];\n    toModifySpacesAvailable[spaceIndex] = !toModifySpacesAvailable[spaceIndex];\n    this.setState({\n      spacesAvailable: toModifySpacesAvailable\n    });\n  }\n\n  toggleDebugMode() {\n    this.setState({\n      debugMode: !this.state.debugMode\n    });\n  }\n\n  componentDidMount() {\n    // this.toggleSpaceAvailable(4);\n  }\n\n  render() {\n    return (\n      <Router>\n        <Navbar bg=\"primary\" variant=\"dark\" sticky=\"top\" >\n          <Navbar.Brand>Finitech Operations Monitor</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <NavDropdown title=\"Parking Lot\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#/\">View</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item\n                onClick={() => { this.toggleDebugMode() }}\n              >Debug Mode</NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown title=\"Cameras\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#/overhead\">CCTV</NavDropdown.Item>\n              <NavDropdown.Item href=\"#/onboard\">Onboard</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar>\n\n        <Switch>\n          <Route path=\"/overhead\">\n            <Overhead />\n          </Route>\n          <Route path=\"/onboard\">\n            <Onboard />\n          </Route>\n          <Route path=\"/\">\n            <Canvas\n              robotPath={this.state.robotPath}\n              debugMode={this.state.debugMode}\n              spacesAvailable={this.state.spacesAvailable}\n            />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}