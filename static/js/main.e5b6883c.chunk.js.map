{"version":3,"sources":["components/parking/ParkingSpace.js","components/parking/ParkingGroup.js","components/debug/DebugGrid.js","components/DateTime.js","components/parking/ParkingLot.js","components/debug/DebugLegend.js","components/cameras/Overhead.js","components/cameras/Onboard.js","components/App.js","serviceWorker.js","index.js"],"names":["ParkingSpace","props","x","y","width","height","fillRadialGradientStartPoint","fillRadialGradientEndPoint","fillRadialGradientStartRadius","fillRadialGradientColorStops","available","shadowBlur","stroke","strokeWidth","text","id","fontSize","ParkingGroup","horizontal","cellSize","groupSpaceIndex","slice","pddlParkingCells","parkingPointers","forEach","parkingPointer","push","key","offset","i","j","DebugGrid","pddlCells","debugGridDimensions","columns","uniqueId","rows","xCoord","parkingLotOffset","debugGridCellSize","yCoord","cellType","debugCellTypes","road","upperLeftSquareSide","blockingSpace","ih","ij","availableParking","carAwaitingPickup","carAwaitingOwner","availableDropoff","robotLocation","fill","DateTime","state","time","Date","toLocaleString","this","interval","setInterval","setState","clearInterval","React","Component","ParkingLot","size","className","ButtonToolbar","sceneFunc","context","shape","beginPath","moveTo","HEIGHT","lineTo","closePath","fillStrokeShape","spaces","spacesAvailable","debugMode","parkingLotSize","PddlLegend","popover","Popover","Title","as","Content","OverlayTrigger","placement","delay","show","hide","overlay","NavDropdown","Item","Cctv","audio","videoConstraints","facingMode","Onboard","App","Object","freeze","Array","spaceIndex","toModifySpacesAvailable","toggleSpaceAvailable","Navbar","bg","variant","sticky","Brand","Nav","title","href","Divider","onClick","toggleDebugMode","DebugLegend","path","Overhead","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5b6883c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Rect, Text, Group } from \"react-konva\";\n\nfunction ParkingSpace(props) {\n    return (\n        <Group>\n            <Rect\n                x={props.x}\n                y={props.y}\n                width={props.width}\n                height={props.height}\n                fillRadialGradientStartPoint={{ x: props.width / 2, y: props.height / 2 }}\n                fillRadialGradientEndPoint={{ x: props.width / 2, y: props.height / 2 }}\n                fillRadialGradientStartRadius={props.width > props.height ? props.height : props.width}\n                fillRadialGradientColorStops={\n                    props.available ?\n                        [0, \"rgba(63,145,60)\", 1, \"rgba(103,233,98)\"] :\n                        [0, \"rgba(141,38,38)\", 1, \"rgba(230,67,67)\"]\n                }\n                shadowBlur={5}\n                stroke={\"black\"}\n                strokeWidth={3}\n            />\n            <Text\n                x={props.x + props.width / 2 - 5}\n                y={props.y + props.height / 2 - 10}\n                text={props.id}\n                fontSize={20}\n            />\n        </Group>\n    );\n}\n\nexport default ParkingSpace;\n","import React from \"react\";\nimport ParkingSpace from './ParkingSpace';\n\nfunction ParkingGroup(props) {\n    var width = props.horizontal ? props.cellSize.width : props.cellSize.height;\n    var height = props.horizontal ? props.cellSize.height : props.cellSize.width;\n    var groupSpaceIndex = props.slice[0];\n\n    let pddlParkingCells = [];\n    props.parkingPointers.forEach((parkingPointer) => {\n        groupSpaceIndex++;\n        pddlParkingCells.push(<ParkingSpace\n            key={groupSpaceIndex}\n            id={groupSpaceIndex}\n            available={true}\n            x={props.offset.x + 10 + width * (parkingPointer.i - 1)}\n            y={props.offset.y + height * parkingPointer.j}\n            width={width}\n            height={height}\n        />\n        );\n    });\n\n    return (<>{pddlParkingCells}</>);\n}\n\nexport default ParkingGroup;\n","import React from \"react\";\nimport { Rect } from \"react-konva\";\n\nfunction DebugGrid(props) {\n    let pddlCells = [], i, j;\n    for (i = 0; i < props.debugGridDimensions.columns; i++)\n        for (j = 0; j < props.debugGridDimensions.rows; j++) {\n            let uniqueId = j + props.debugGridDimensions.rows * i;\n\n            let xCoord = props.parkingLotOffset.x + i * props.debugGridCellSize.width;\n            let yCoord = props.parkingLotOffset.y + j * props.debugGridCellSize.height;\n\n            let cellType = props.debugCellTypes.road;\n\n            if (xCoord < props.parkingLotOffset.x + props.upperLeftSquareSide &&\n                props.parkingLotOffset.y + yCoord < props.upperLeftSquareSide)\n                cellType = props.debugCellTypes.blockingSpace;\n\n            let ih =i, ij =j;\n            props.parkingPointers.forEach(parkingPointer => {\n                if (parkingPointer.i === ih && parkingPointer.j === ij)\n                    cellType = props.debugCellTypes.availableParking;\n            });\n\n            if (i === 0 && j === 5)\n                cellType = props.debugCellTypes.carAwaitingPickup;\n\n            if (i === 0 && j === 4)\n                cellType = props.debugCellTypes.carAwaitingOwner;\n\n            if (i === 0 && (j === 2 || j === 3))\n                cellType = props.debugCellTypes.availableDropoff;\n\n            if (i === 4 && j === 2)\n                cellType = props.debugCellTypes.robotLocation;\n\n            pddlCells.push(\n                <Rect\n                    key={uniqueId}\n                    x={xCoord}\n                    y={yCoord}\n                    width={props.debugGridCellSize.width}\n                    height={props.debugGridCellSize.height}\n                    fill={cellType}\n                    shadowBlur={3}\n                    stroke={\"black\"}\n                    strokeWidth={0.5}\n                />);\n        }\n\n    return (<>{pddlCells}</>);\n}\n\nexport default DebugGrid;\n","import React from \"react\";\n\nclass DateTime extends React.Component {\n    constructor() {\n      super();\n      this.state = { time: new Date().toLocaleString() };\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.setState({ time: new Date().toLocaleString() }), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <h3> {this.state.time} </h3>);\n    }\n}\n\nexport default DateTime;\n","import React from \"react\";\nimport ParkingGroup from './ParkingGroup';\nimport DebugGrid from '../debug/DebugGrid';\nimport DateTime from '../DateTime';\nimport { ButtonToolbar } from \"react-bootstrap\";\nimport { Stage, Layer, Shape } from \"react-konva\";\n\nfunction ParkingLot(props) {\n    const HEIGHT = 750;\n    // this is 96cm\n    const squareSideHeightRatio = 96 / 288;\n    const upperLeftSquareSide = HEIGHT * squareSideHeightRatio;\n    // height is 288cm, width is 401.4cm\n    const widthHeightRatio = 401.4 / 288;\n    const size = { height: HEIGHT, width: HEIGHT * widthHeightRatio };\n    const offset = { x: 380, y: 10 };\n\n    const debugGridDimensions = { rows: 6, columns: 4 };\n    const debugGridCellSize = {\n        height: size.height / 6,\n        width: size.width / 4\n    }\n    let parkingPointers = [\n        { i: 2, j: 1 },\n        { i: 2, j: 2 },\n        { i: 3, j: 1 },\n        { i: 3, j: 2 },\n        { i: 2, j: 3 },\n        { i: 3, j: 3 },\n        { i: 2, j: 4 },\n        { i: 3, j: 4 }\n    ]\n\n    return (\n        <div className=\"App\" >\n            <header className=\"App-header\">\n                <ButtonToolbar>\n                    <DateTime />\n                </ButtonToolbar>\n                <Stage width={1900} height={825}>\n                    <Layer>\n                        <Shape\n                            x={offset.x}\n                            y={offset.y}\n                            sceneFunc={(context, shape) => {\n                                context.beginPath();\n                                context.moveTo(upperLeftSquareSide, 0);\n                                context.lineTo(upperLeftSquareSide, upperLeftSquareSide);\n                                context.lineTo(0, upperLeftSquareSide);\n                                context.lineTo(0, size.height);\n                                context.lineTo(size.width, size.height);\n                                context.lineTo(size.width, 0);\n                                context.closePath();\n                                // (!) Konva specific method, it is very important\n                                context.fillStrokeShape(shape);\n                            }}\n                            fill={\"white\"}\n                            stroke={\"black\"}\n                            strokeWidth={5}\n                        />\n                        <ParkingGroup\n                            cellSize={debugGridCellSize}\n                            parkingPointers={parkingPointers}\n                            horizontal={true}\n                            offset={{ x: offset.x + upperLeftSquareSide, y: offset.y }}\n                            spaces={props.spacesAvailable}\n                            slice={[0, 8]}\n                        />\n                        {props.debugMode ?\n                            <DebugGrid\n                                debugGridCellSize={debugGridCellSize}\n                                debugGridDimensions={debugGridDimensions}\n                                parkingPointers={parkingPointers}\n                                debugCellTypes={props.debugCellTypes}\n                                upperLeftSquareSide={upperLeftSquareSide} // for pddl grid automatic generation\n                                parkingLotSize={size}\n                                parkingLotOffset={offset}\n                            /> :\n                            null\n                        }\n                    </Layer>\n                </Stage>\n            </header>\n        </div>\n    );\n}\n\nexport default ParkingLot;\n","import React from \"react\";\nimport { Stage, Layer, Rect, Text, Group } from \"react-konva\";\nimport { Popover, OverlayTrigger, NavDropdown } from \"react-bootstrap\";\n\nfunction PddlLegend(props) {\n    const popover = <Popover id=\"popover-basic\">\n        <Popover.Title as=\"h3\">Legend</Popover.Title>\n        <Popover.Content>\n            <Stage width={240} height={280}>\n                <Layer>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={5}\n                            width={30}\n                            height={30}\n                            fill={props.debugCellTypes.blockingSpace}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={10}\n                            text={\"Blocking Space\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={45}\n                            width={30}\n                            height={30}\n                            fill={props.debugCellTypes.road}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={50}\n                            text={\"Road\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={85}\n                            width={30}\n                            height={30}\n                            fill={props.debugCellTypes.availableParking}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={90}\n                            text={\"Available Parking\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={125}\n                            width={30}\n                            height={30}\n                            fill={props.debugCellTypes.availableDropoff}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={130}\n                            text={\"Available Dropoff\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={165}\n                            width={30}\n                            height={30}\n                            fill={props.debugCellTypes.carAwaitingPickup}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={170}\n                            text={\"Car Awaiting Pickup\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={205}\n                            width={30}\n                            height={30}\n                            fill={props.debugCellTypes.carAwaitingOwner}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={210}\n                            text={\"Car Awaiting Owner\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                    <Group>\n                        <Rect\n                            x={5}\n                            y={245}\n                            width={30}\n                            height={30}\n                            fill={props.debugCellTypes.robotLocation}\n                            shadowBlur={3}\n                            stroke={\"black\"}\n                            strokeWidth={0.5}\n                        />\n                        <Text\n                            x={45}\n                            y={250}\n                            text={\"Robot Location\"}\n                            fontSize={20}\n                        />\n                    </Group>\n                </Layer>\n            </Stage>\n        </Popover.Content>\n    </Popover>\n\n    return (\n        <OverlayTrigger\n            placement=\"right\"\n            delay={{ show: 150, hide: 150 }}\n            overlay={popover}\n        >\n            <NavDropdown.Item>Debug Legend</NavDropdown.Item>\n        </OverlayTrigger>\n    );\n}\n\nexport default PddlLegend;\n","import React from \"react\";\nimport Webcam from \"react-webcam\";\n\nfunction Cctv() {\n    return (\n        <div className=\"App\" >\n            <header className=\"App-header\">\n                <h3 className=\"mb-3\"> CCTV camera </h3>\n                <Webcam\n                    audio={false}\n                    \n                    videoConstraints={{\n                        width: 1280,\n                        height: 720,\n                        facingMode: \"user\" // { exact: \"environment\" } for facing-out camera\n                    }} />\n            </header>\n        </div>\n    );\n}\n\nexport default Cctv;\n","import React from \"react\";\n\nfunction Onboard() {\n    return (\n        <div className=\"App\" >\n            <header className=\"App-header\">\n                <h3> Live stream from onboard Raspberry Pi cameras to be placed here</h3>\n            </header>\n        </div>\n    );\n}\n\nexport default Onboard;\n","import React from 'react';\nimport ParkingLot from './parking/ParkingLot';\nimport DebugLegend from './debug/DebugLegend';\nimport Overhead from './cameras/Overhead';\nimport Onboard from './cameras/Onboard';\nimport './App.css';\n// import writeProblem from '../actions/writeProblem';\n// import solveProblem from '../actions/solveProblem';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      spacesAvailable: new Array(8).fill(true),\n      debugMode: false\n    };\n  }\n\n  debugCellTypes = Object.freeze({\n      \"blockingSpace\": \"rgba(228, 27, 65, 0.2)\", // red\n      \"road\": \"rgba(255, 255, 255, 0.2)\", // white\n      \"availableParking\": \"rgba(103, 233, 98, 0.2)\", // green\n      \"availableDropoff\": \"rgba(34, 81, 221, 0.2)\", // blue\n      \"carAwaitingPickup\": \"rgba(236, 140, 19, 0.2)\", // orange\n      \"carAwaitingOwner\": \"rgba(94, 0, 255, 0.2)\", // purple\n      \"robotLocation\": \"rgba(50, 50, 50, 0.2)\" // robot location\n  })\n\n  toggleSpaceAvailable(spaceIndex) {\n    let toModifySpacesAvailable = [...this.state.spacesAvailable];\n    toModifySpacesAvailable[spaceIndex] = !toModifySpacesAvailable[spaceIndex];\n    this.setState({\n      spacesAvailable: toModifySpacesAvailable\n    });\n  }\n\n  toggleDebugMode() {\n    this.setState({\n      debugMode: !this.state.debugMode\n    });\n  }\n\n  componentDidMount() {\n    this.toggleSpaceAvailable(4);\n  }\n\n  render() {\n    return (\n      <Router>\n        <Navbar bg=\"primary\" variant=\"dark\" sticky=\"top\" >\n          {/* <img\n            src={window.location.origin + \"/favicon.ico\"}\n            width=\"30\"\n            height=\"30\"\n            className=\"d-inline-block align-top\"\n            alt=\"Finitech logo\"\n          /> */}\n          <Navbar.Brand>Finitech Operations Monitor</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <NavDropdown title=\"Parking Lot\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#/\">View</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item\n                onClick={() => { this.toggleDebugMode() }}\n              >Debug Mode</NavDropdown.Item>\n              <DebugLegend\n                debugCellTypes={this.debugCellTypes}\n              />\n            </NavDropdown>\n            <NavDropdown title=\"Cameras\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#/overhead\">CCTV</NavDropdown.Item>\n              <NavDropdown.Item href=\"#/onboard\">Onboard</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar>\n\n        <Switch>\n          <Route path=\"/overhead\">\n            <Overhead />\n          </Route>\n          <Route path=\"/onboard\">\n            <Onboard />\n          </Route>\n          <Route path=\"/\">\n            <ParkingLot\n              debugMode={this.state.debugMode}\n              debugCellTypes={this.debugCellTypes}\n              spacesAvailable={this.state.spacesAvailable}\n            />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}